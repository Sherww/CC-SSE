"check if both objects are same","BlockComment","if ( this == input object ) { is equal = true ; } else if ( input object != null && get class ( ) == input object . get class ( ) ) { final student input student = ( student ) input object ; if ( this . get student id ( ) == input student . get student id ( ) ) { is equal = true ; } }"
"if student id matched","BlockComment","if ( this . get student id ( ) == input student . get student id ( ) ) { is equal = true ; }"
"student id is assumed to be unique","BlockComment","return this . get student id ( ) ;"
"delete the student from list","BlockComment","if ( this . get students ( ) . contains ( student to be deleted ) ) { this . get students ( ) . remove ( student to be deleted ) ; } else { throw new data mapper exception ( __str__ + student to be deleted . get name ( ) + __str__ ) ; }"
"create new data mapper of first type","BlockComment","final student data mapper mapper = new student data mapper impl ( ) ;"
"we expect 4 events , 2 menu selections and 2 content change actions","LineComment","final argument captor < action > action captor = argument captor . for class ( action . class ) ; verify ( store , times ( __num__ ) ) . on action ( action captor . capture ( ) ) ; verify no more interactions ( store ) ; final list < action > actions = action captor . get all values ( ) ; final list < menu action > menu actions = actions . stream ( ) . filter ( a -> a . get type ( ) . equals ( action type . menu_item_selected ) ) . map ( a -> ( menu action ) a ) . collect ( collectors . to list ( ) ) ; final list < content action > content actions = actions . stream ( ) . filter ( a -> a . get type ( ) . equals ( action type . content_changed ) ) . map ( a -> ( content action ) a ) . collect ( collectors . to list ( ) ) ; assert equals ( __num__ , menu actions . size ( ) ) ; assert equals ( __num__ , menu actions . stream ( ) . map ( menu action :: get menu item ) . filter ( menu item . home :: equals ) . count ( ) ) ; assert equals ( __num__ , menu actions . stream ( ) . map ( menu action :: get menu item ) . filter ( menu item . company :: equals ) . count ( ) ) ; assert equals ( __num__ , content actions . size ( ) ) ; assert equals ( __num__ , content actions . stream ( ) . map ( content action :: get content ) . filter ( content . products :: equals ) . count ( ) ) ; assert equals ( __num__ , content actions . stream ( ) . map ( content action :: get content ) . filter ( content . company :: equals ) . count ( ) ) ;"
"content should not react on menu action ...","LineComment","content store . on action ( new menu action ( menu item . products ) ) ; verify zero interactions ( view ) ;"

 