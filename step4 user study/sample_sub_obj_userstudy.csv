check if ping <PLACE_HOLDER> does not encounter any errors,if ( process . exit value ( ) == __num__ ) { shell_result = parse ( process ) ; } else { shell_result = su_busyboox_ping ( params [ __num__ ] . address ) ; },vm encounter errors,fail,sub
media player 2 uses <PLACE_HOLDER> instead of application mime types .,if ( mime types . application_cea608 . equals ( mime type ) ) { media format . set string ( media format . key_mime @$ mimetype_text_cea_608 ) ; } else if ( mime types . application_cea708 . equals ( mime type ) ) { media format . set string ( media format . key_mime @$ mimetype_text_cea_708 ) ; },media uses strings,fail,obj
move over a bit so the oval does n't overwrite the <PLACE_HOLDER>,int label padding = __num__ ; location . x -= label padding * __num__ ; location . y -= label padding * __num__ ;,oval overwrite label,fail,obj
client eventually sees broken <PLACE_HOLDER>,assert throws ( io exception . class @$ ( ) -> { int i = __num__ ; for ( i = __num__ ; i < __num__ ; i ++ ) { client . get output stream ( ) . write ( __num__ ) ; } } ) ;,client sees connection,fail,obj
no permissions required or already grunted @$ can start crop image <PLACE_HOLDER>,m crop image view . set image uri async ( m crop image uri ) ;,permissions start view,fail,obj
assert that the table created still has no hcat <PLACE_HOLDER>,table table2 = client . get table ( __str__ @$ __str__ ) ; assert . assert true ( table2 . get sd ( ) . get input format ( ) . equals ( h cat constants . hive_rcfile_if_class ) ) ; driver . run ( __str__ ) ;,table has data,fail,obj
clear non backed up <PLACE_HOLDER> from expected interval stats,m interval stats . active configuration = null ; m interval stats . configurations . clear ( ) ; m interval stats . events . clear ( ) ;,non backed configuration,fail,obj
make sure <PLACE_HOLDER> can handle colon,if ( replaced value . contains ( __str__ ) ) { try { file tmp = file . create temp file ( __str__ @$ __str__ ) ; tmp . delete ( ) ; } catch ( io exception e ) { throw new invalid builds dir ( new builds dir value + __str__ ) ; } },pattern handle colon,fail,sub
default <PLACE_HOLDER> should show system decors,assert true ( m target . should show system decors locked ( m primary display ) ) ;,options show decors,fail,sub
trigger check to see if parent <PLACE_HOLDER> has changed @$ recalculate layouts,resize timer = new timer ( ) { @ override public void run ( ) { perform size check ( ) ; resize timer . schedule ( monitor_parent_timer_interval ) ; } } ;,monitor changed layouts,fail,sub
the new code browser selection should have <PLACE_HOLDER> of our vertex selections,assert true ( code browser selection . get min address ( ) . equals ( first selection . get min address ( ) ) ) ; assert true ( code browser selection . get max address ( ) . equals ( second selection . get max address ( ) ) ) ;,selection have one,fail,obj
<PLACE_HOLDER> like forall not node might override this propagation,insert child left tuple ( sink @$ trg left tuples @$ left tuple @$ right tuple . get propagation context ( ) @$ true ) ;,children override propagation,fail,sub
this is a user who already configured the <PLACE_HOLDER>,if ( get polling thread count ( ) != threads_default ) { return true ; },who configured thread,fail,obj
need constantly invalidate view in order to get max redraw <PLACE_HOLDER> .,m layout . get view tree observer ( ) . add on pre draw listener ( this ) ;,max redraw time,fail,obj
the <PLACE_HOLDER> does not cross a subpackage boundary .,if ( containing pkg . equals ( label . get package identifier ( ) ) ) { return false ; },process cross boundary,fail,sub
add the input file string and date <PLACE_HOLDER> to lists,file strings . add ( input line ) ; dt objects . add ( calculateddt ) ;,input file string,fail,obj
construct container <PLACE_HOLDER> increase request @$,list < token > increase tokens = new array list < > ( ) ;,tokens increase request,fail,sub
reconnect internet after testing network health triggered <PLACE_HOLDER>,get device ( ) . execute shell command ( __str__ ) ; get device ( ) . execute shell command ( __str__ ) ;,health triggered broadcast,fail,obj
to prevent concurrent <PLACE_HOLDER> see bug 41646,synchronized ( this . overflow map ) { overflow oplog oplog = get child ( ( int ) oplog id ) ; if ( oplog != null ) { oplog . remove ( dr @$ entry ) ; } },checks see bug,fail,sub
check that null pd array throws <PLACE_HOLDER>,try { new access control context ( null ) ; throw new exception ( __str__ ) ; } catch ( exception e ) { if ( ! ( e instanceof null pointer exception ) ) { throw new exception ( __str__ ) ; } },array throws exception,fail,obj
orc does n't currently handle <PLACE_HOLDER>,case timestamp : timestamp ts = data type utils . to timestamp ( field value @$ ( ) -> data type utils . get date format ( field data type . get format ( ) ) @$ field name ) ;,orc handle timestamp,fail,obj
if this next <PLACE_HOLDER> runs a clinit @$ it fails,lambda l = dummy method to make check style happy ( static fail if clinit runs :: static method ) ; try { l . run ( __num__ @$ __num__ ) ; fail ( __str__ ) ; } catch ( assertion error ae ) { },lambda runs clinit,fail,sub
we found counter objects which imply <PLACE_HOLDER>,if ( ! verify unexpected values ( counters ) ) { success = false ; },which imply error,fail,obj
second <PLACE_HOLDER> forces the output to be materialized,p assert . that ( result ) . contains in any order ( kv . of ( __str__ @$ immutable list . of ( __num__ @$ __num__ @$ __num__ ) ) @$ kv . of ( __str__ @$ immutable list . of ( __num__ ) ) ) ;,kv forces output,fail,sub
keys which have similar <PLACE_HOLDER> as the desired key,list < string > possible matches = new array list < > ( ) ;,which have pattern,fail,obj
the following should take over a <PLACE_HOLDER>,secure random rand = new secure random ( ) ; rand . next bytes ( new byte [ __num__ ] ) ;,following take thread,fail,obj
<PLACE_HOLDER> has constant value @$ return a literal .,if ( var . get constant value ( ) != null ) { return tree util . new literal ( var . get constant value ( ) @$ type util ) ; },variable return literal,fail,sub
audit sql <PLACE_HOLDER> for example wo n't extend entity sql <PLACE_HOLDER>,if ( ! ( type instanceof java . lang . reflect . parameterized type ) ) { return null ; },dao extend driver,fail,obj
the <PLACE_HOLDER> zygote did n't match . try the secondary .,if ( m zygote secondary socket address != null ) { attempt connection to secondary zygote ( ) ; if ( secondary zygote state . matches ( abi ) ) { return secondary zygote state ; } },pattern try secondary,fail,sub
the agent can read <PLACE_HOLDER> from user content,string content = s . get channel ( ) . call ( new read files2m callable ( target ) ) ;,agent read files,fail,obj
if there are no tangents use the classic <PLACE_HOLDER>,if ( tb == null ) { apply skinning ( mesh @$ offset matrices ) ; } else { apply skinning tangents ( mesh @$ offset matrices @$ tb ) ; },tangents use scaling,fail,obj
check if the workers go <PLACE_HOLDER> ...,assert true ( appender . log contains ( __str__ ) ) ; assert true ( appender . log contains ( __str__ ) ) ; assert true ( appender . log contains ( __str__ ) ) ;,workers go room,fail,obj
thread a <PLACE_HOLDER> gets pool a with thread a <PLACE_HOLDER>,if ( threada1 . in event loop ( ) ) { await ( arrival barrier ) ; return poola1 ; } else if ( threada2 . in event loop ( ) ) { await ( arrival barrier ) ; await ( release barrier ) ; return poola2 ; },2 gets pool,fail,sub
the primary zygote did n't match . try the <PLACE_HOLDER> .,if ( m zygote secondary socket address != null ) { attempt connection to secondary zygote ( ) ; if ( secondary zygote state . matches ( abi ) ) { return secondary zygote state ; } },primary try protocol,fail,obj
indicate the the <PLACE_HOLDER> supports muc,join presence . add extension ( new muc initial presence ( password @$ max chars @$ max stanzas @$ seconds @$ since ) ) ;,server supports muc,fail,sub
<PLACE_HOLDER> must also remove the lt from the rule network evaluator,if ( match . get rule agenda item ( ) != null ) { if ( left tuple . get memory ( ) != null ) { left tuple . get memory ( ) . remove ( left tuple ) ; } },filtering remove lt,fail,sub
indicate the the client supports <PLACE_HOLDER>,join presence . add extension ( new muc initial presence ( password @$ max chars @$ max stanzas @$ seconds @$ since ) ) ;,client supports presence,fail,obj
does lfs see the correct file <PLACE_HOLDER> ?,assert equals ( lfs . get file status ( pathtotestfile1 ) . get len ( ) @$ testfile1 . length ( ) ) ;,lfs see size,fail,obj
did some instances lose their <PLACE_HOLDER> ?,if ( last known instance configs . size ( ) != current relevant instance configs . size ( ) ) { logger . info ( __str__ @$ table name @$ last known instance configs . size ( ) @$ current relevant instance configs . size ( ) ) ; return true ; },instances lose state,fail,obj
one shortcut when <PLACE_HOLDER> node 3,add shortcut ( nodea @$ nodeb @$ e3toa . get edge ( ) @$ e3tob . get edge ( ) @$ e3toa . get edge ( ) @$ e3tob . get edge ( ) @$ __num__ ) ; set level equal to node id for all nodes ( ) ;,b node 3,fail,sub
register the chat window menu bar <PLACE_HOLDER> .,container filter . put ( container . container_id @$ container . container_chat_menu_bar . getid ( ) ) ; bundle context . register service ( plugin component factory . class . get name ( ) @$ new otr plugin component factory ( container . container_chat_menu_bar ) @$ container filter ) ;,menu bar component,fail,obj
to avoid rejected execution exception in basic directory model wait a <PLACE_HOLDER>,try { thread . sleep ( __num__ ) ; } catch ( interrupted exception e ) { throw new runtime exception ( e ) ; },exception wait sec,fail,obj
<PLACE_HOLDER> must not receive data sent by server after reset .,assert false ( stream1 data latch . await ( __num__ @$ time unit . seconds ) ) ;,servers receive data,fail,sub
p 12 <PLACE_HOLDER> currently does not support separate store and entry passwords,if ( p12keystore . equals ignore case ( ks . get type ( ) ) ) { throw une2 ; } else { pkey = get key passwd ( alias @$ null @$ null ) ; pp = new password protection ( pkey ) ; entry = ks . get entry ( alias @$ pp ) ; },key support store,fail,sub
let explicit command <PLACE_HOLDER> override the environment .,m_port = ports . next client ( ) ; m_admin port = ports . next admin ( ) ; m_internal port = ports . next ( ) ; m_zk interface = __str__ + ports . next ( ) ;,options override environment,fail,sub
if <PLACE_HOLDER> does n't contain the target address,if ( ! reference . is memory reference ( ) ) { continue ; } if ( ! memory . contains ( target ) ) { continue ; } if ( ignore new pointers . contains ( target ) ) { continue ; },reference contain address,fail,sub
recompute system ui <PLACE_HOLDER> .,if ( ( m window attributes changes flag & window manager . layout params . translucent_flags_changed ) != __num__ ) { m attach info . m recompute global attributes = true ; },system ui attributes,fail,obj
finally @$ the consumer <PLACE_HOLDER> provides formatted log output,log . info ( string . format ( __str__ @$ kw . get key ( ) . get key ( ) @$ kw . get value ( ) ) ) ;,which provides output,fail,sub
compute coordinates of point in box coordinate <PLACE_HOLDER>,temp vars vars = temp vars . get ( ) ; vector3f closest = vars . vect1 ; point . subtract ( center @$ closest ) ;,coordinates coordinate space,fail,obj
revisit : the following should also update id <PLACE_HOLDER>,attr . set node value ( attr value ) ; index = f element . set xerces attribute node ( attr ) ; f augmentations . insert element at ( new augmentations impl ( ) @$ index ) ; attr . set specified ( false ) ;,the update node,fail,obj
wait @$ the <PLACE_HOLDER> no longer has access to the display .,if ( ! m window manager internal . is uid allowed on display ( cs . self reported display id @$ cs . uid ) ) { return input bind result . invalid_display_id ; },ui has access,fail,sub
'not found ' can happen if <PLACE_HOLDER> creates more than one subnetwork,throw new runtime exception ( __str__ + __str__ + from + __str__ + to + __str__ + req @$ ex ) ;,client creates subnetwork,fail,sub
lower android <PLACE_HOLDER> have a reference table with 1024 entries only,for ( int i = __num__ ; i < __num__ ; i ++ ) { assert true ( jni test . create and delete int array ( ) ) ; system . out . print ( i ) ; },es have table,fail,sub
<PLACE_HOLDER> is n't supported @$ mimic resolver behavior .,if ( remote locations . is empty ( ) ) { return null ; },contact mimic behavior,fail,sub
new <PLACE_HOLDER> has one less element,int new row location = get celly ( __num__ ) ; assert close to ( __str__ @$ new row location @$ row location ) ;,cell has element,fail,sub
saving the tool saves the <PLACE_HOLDER>,tool = save tool ( env . get project ( ) @$ tool ) ;,tool saves process,fail,obj
optionally check the byte after this frame matches sync <PLACE_HOLDER> .,if ( ! try read ( pes buffer @$ adts scratch . data @$ __num__ ) ) { return true ; } adts scratch . set position ( __num__ ) ; int frame size = adts scratch . read bits ( __num__ ) ; if ( frame size <= __num__ ) { return false ; },frame matches header,fail,obj
avoid some <PLACE_HOLDER> do not have a size .,if ( size > __num__ ) { point . x = __num__ ; point . y = __num__ ; },points have size,fail,sub
if <PLACE_HOLDER> st sibling @$ return parent,if ( result == null ) { result = node . get parent node ( ) ; return result ; },parent st parent,fail,sub
first request has no continuation <PLACE_HOLDER> .,state tag state tag = new state tag ( state tag . kind . bag @$ encoded tag @$ state family ) ;,request has sequence,fail,obj
not null constraint should reference a single <PLACE_HOLDER>,m constraint muk = new m constraint ( constraint name @$ constraint type @$ __num__ @$ null @$ null @$ enable validate rely @$ parent table @$ null @$ parentcd @$ null @$ null @$ parent integer index @$ constraint value ) ;,constraint reference parent,fail,obj
self <PLACE_HOLDER> should adapt its fencing token,assert equals ( new fencing token @$ fenced gateway . get fencing token ( ) ) ; assert equals ( new fencing token @$ fenced testing endpoint . get fencing token ( ) ) ; rpc utils . terminate rpc endpoint ( fenced testing endpoint @$ timeout ) ;,ice adapt token,fail,sub
ok @$ lets compare this <PLACE_HOLDER> lexicographically,subversion comparision result = v comps1 [ i ] . compare to ( v comps2 [ i ] ) ;,lets compare object,fail,obj
validate our name matches an existing <PLACE_HOLDER>,file topic = get help topic ( ) ; file image file = get image file ( topic @$ name ) ; finished ( topic @$ image file . get name ( ) ) ;,name matches file,fail,obj
<PLACE_HOLDER> has excessive logging at info level,parquet logger = logger . get logger ( __str__ ) ; parquet logger . set level ( level . warning ) ;,vanilla has excessive,fail,sub
register an <PLACE_HOLDER> channel open listener,open listener channel open listener = remoteejb service . get open listener ( ) ; try { registration = endpoint . register service ( ejb_channel_name @$ channel open listener @$ this . channel creation options ) ; } catch ( service registration exception e ) { throw new start exception ( e ) ; },and channel listener,fail,sub
existing write <PLACE_HOLDER> against the caller 's val<PLACE_HOLDER> list .,if ( part == null ) { return null ; } if ( mt == null ) { throw new invalid object exception ( __str__ ) ; },existing write item,fail,obj
the job should wait more than one <PLACE_HOLDER>,if ( cur priority > executable . get default priority ( ) + __num__ ) { add to job pool ( executable @$ cur priority ) ; } else { left job priorities . put ( executable . get id ( ) @$ cur priority + __num__ ) ; },job wait sec,fail,obj
<PLACE_HOLDER> connect timeout from server pool configuration .,for ( ldap server server : servers ) { if ( server . get connect timeout ( ) == __num__ && timeout != __num__ ) { server . set connect timeout ( timeout ) ; } } return this ;,setup connect timeout,fail,sub
<PLACE_HOLDER> typically have many watches @$ so use default cap here,if ( paths == null ) { paths = new hash set < > ( ) ; watch2 paths . put ( watcher @$ paths ) ; },paths have watches,fail,sub
this <PLACE_HOLDER> does the right thing with a null transaction task queue,if ( ! m_complete msg . is restart ( ) ) { do commonspi complete actions ( ) ; log todr ( site connection . getdr gateway ( ) ) ; } else { m_txn state . set begin undo token ( site . k invalid undo token ) ; },method does thing,fail,sub
stopship do proper <PLACE_HOLDER> in split user mode,return code_ok ; if ( ! m injector . user manager is split system user ( ) ) { if ( device owner user id != user handle . user_system ) { return code_not_system_user ; } if ( has user setup completed ( user handle . user_system ) ) { return code_user_setup_completed ; } } else { },stopship do validation,fail,obj
reconnect internet after testing network <PLACE_HOLDER> triggered rollbacks,get device ( ) . execute shell command ( __str__ ) ; get device ( ) . execute shell command ( __str__ ) ;,click triggered rollbacks,fail,sub
user certificate store @$ does not bypass static <PLACE_HOLDER> .,if ( info . target sdk version <= build . version_codes . m && ! info . is privileged app ( ) ) { builder . add certificates entry ref ( new certificates entry ref ( user certificate source . get instance ( ) @$ false ) ) ; },store bypass defaults,fail,obj
2 nd time launch service to handle if service exist <PLACE_HOLDER>,system service . launch user service ( user services ) ; verify for launched user services ( ) ;,service exist ok,fail,obj
... but the three <PLACE_HOLDER> that follow <PLACE_HOLDER> include an authorization header,for ( int i = __num__ ; i < __num__ ; i ++ ) { request = server . take request ( ) ; assert equals ( __str__ @$ request . get request line ( ) ) ; assert contains ( request . get headers ( ) @$ __str__ + simple authenticator . base_64_credentials ) ; },credentials include header,fail,sub
shuffle the list so all clients do n't prefer the same <PLACE_HOLDER>,if ( iter == null ) { list < redis client > clients = new array list < > ( sentinels . values ( ) ) ; collections . shuffle ( clients ) ; iter = clients . iterator ( ) ; },clients prefer referants,fail,obj
<PLACE_HOLDER> a class not found exception if not found .,class < ? > cls = class . for name ( ci class ) ;,class found exception,fail,sub
if <PLACE_HOLDER> exist : update value,if ( index >= __num__ ) { values . set ( index @$ values . get ( index ) + val ) ; } else { set ( val @$ keys ) ; },set exist value,fail,sub
will <PLACE_HOLDER> create blob method on the underlying connection,method m = connection . class . get method ( __str__ @$ new class [ ] { } ) ;,not create method,fail,sub
set <PLACE_HOLDER> will call invalidate self and drive the animation .,int partial alpha = ( int ) ( alpha * normalized ) ; super . set alpha ( partial alpha ) ; super . draw ( canvas ) ; super . set alpha ( alpha ) ;,animator call self,fail,sub
this <PLACE_HOLDER> does not return any result .,return integer . parse int ( this . < string > argument ( __num__ ) ) ;,string return result,fail,sub
ensure that the notifier updated the <PLACE_HOLDER>,assert equals ( v1 @$ r . get entry ( k3 ) . get value ( ) ) ;,notifier updated value,fail,obj
verify the puts reach <PLACE_HOLDER> 2,vm2 . invoke ( ( ) -> wan test base . validate region size ( get test method name ( ) + __str__ @$ __num__ ) ) ;,puts reach size,fail,obj
we perform the analogous <PLACE_HOLDER> on the get methods .,subclass . set field ( type @$ subclass @$ boolean field @$ illegal argument exception class @$ value ) ;,class get methods,fail,sub
we only <PLACE_HOLDER> get and head requests,if ( ! exchange . get request method ( ) . equals ( get ) && ! exchange . get request method ( ) . equals ( head ) ) { return false ; } if ( entry == null ) { this . response cachable = mark cacheable ; return false ; },one get requests,fail,sub
audit sql <PLACE_HOLDER> for example wo n't extend entity sql <PLACE_HOLDER>,if ( ! ( type instanceof java . lang . reflect . parameterized type ) ) { return null ; },deref extend dao,fail,sub
<PLACE_HOLDER> get transaction constructor .,set transaction type ( cardio2e transaction types . get ) ; super . set object type ( cardio2e object types . zones_bypass ) ; set object number ( object number ) ;,control get constructor,fail,sub
cnxns typically have many <PLACE_HOLDER> @$ so use default cap here,if ( paths == null ) { paths = new hash set < > ( ) ; watch2 paths . put ( watcher @$ paths ) ; },cnxns have paths,fail,obj
all honest <PLACE_HOLDER> should detect cheating,boolean thrown = false ; try { run application ( test application ) ; } catch ( exception e ) { assert true ( e . get cause ( ) instanceof malicious exception ) ; thrown = true ; } assert true ( __str__ @$ thrown ) ;,errors detect cheating,fail,sub
skip bundles that have n't reached resolved <PLACE_HOLDER> ; skip fragments .,if ( b . get state ( ) <= bundle . resolved || b . get headers ( ) . get ( constants . fragment_host ) != null ) continue ; try { cls = b . load class ( name ) ; break ; } catch ( class not found exception ignored ) { },bundles resolved states,fail,obj
our internal <PLACE_HOLDER> does not have this rule,if ( ! analysis mock . is this bazel ( ) ) { return ; },analysis have rule,fail,sub
phreak must also remove the <PLACE_HOLDER> from the rule network evaluator,if ( match . get rule agenda item ( ) != null ) { if ( left tuple . get memory ( ) != null ) { left tuple . get memory ( ) . remove ( left tuple ) ; } },phreak remove task,fail,obj
<PLACE_HOLDER> exists default ssl context to re<PLACE_HOLDER> after test .,final ssl context dflt ssl ctx = ssl context . get default ( ) ;,use exists context,fail,sub
no <PLACE_HOLDER> should take more than 2 steps .,if ( new style2 != null ) { if ( fallback cache [ new style2 . ordinal ( ) ] != null ) { throw new illegal state exception ( __str__ ) ; } },overloading take steps,fail,sub
consume <PLACE_HOLDER> enter event if we generate one,if ( id == mouse event . mouse_entered ) { e . consume ( ) ; },mouse enter event,fail,sub
zip <PLACE_HOLDER> does n't override equals,assert equals ( entry . get name ( ) @$ entries . next element ( ) . get name ( ) ) ;,name override equals,fail,sub
add all the <PLACE_HOLDER> with proper context add first mapper,outputqueue = chain . create blocking queue ( ) ; chain . add mapper ( context @$ outputqueue @$ __num__ ) ;,chains add mapper,fail,sub
handle negatives @$ which means last n <PLACE_HOLDER>,if ( start < __num__ ) { start = str . length ( ) + start ; },which means text,fail,obj
src <PLACE_HOLDER> and its subtree can not contain snapshottable directories with snapshots,fs dir snapshot op . check snapshot ( fsd @$ srciip @$ snapshottable dirs ) ;,directory contain directories,fail,sub
should not work : <PLACE_HOLDER> on string,try { tuple ds . aggregate ( aggregations . sum @$ __num__ ) ; assert . fail ( ) ; } catch ( unsupported aggregation type exception iae ) { },not work aggregate,fail,obj
<PLACE_HOLDER> within i fs cause syntax errors on safari .,assert print ( __str__ @$ __str__ ) ; assert print ( __str__ @$ __str__ ) ; assert print ( __str__ @$ __str__ ) ; assert print ( __str__ @$ __str__ ) ;,parsing fs errors,fail,sub
custom deserializer always produces <PLACE_HOLDER> like this :,assert equals ( __str__ @$ bean . a ) ; assert equals ( __str__ @$ bean . b ) ;,deserializer produces types,fail,obj
wer expect a successful <PLACE_HOLDER>,c . connect blocking ( ) ; c . close blocking ( ) ; http headers . put ( __str__ @$ __str__ ) ; c = new example client ( new uri ( __str__ ) @$ http headers ) ;,wer expect success,fail,obj
subclasses like forall not node might override this <PLACE_HOLDER>,insert child left tuple ( sink @$ trg left tuples @$ left tuple @$ right tuple . get propagation context ( ) @$ true ) ;,subclasses override method,fail,obj
bt configures the interface elsewhere : only start <PLACE_HOLDER> .,final inet4 address srv addr = ( inet4 address ) parse numeric address ( bluetooth_iface_addr ) ; return configure dhcp ( enabled @$ srv addr @$ bluetooth_dhcp_prefix_length ) ;,configures start gpu,fail,obj
find all configurations where the <PLACE_HOLDER> contains any string from hidden set,iterable < map . entry < string @$ string > > matching = iterables . filter ( conf @$ conf entry -> { for ( string name : hidden set ) { if ( conf entry . get key ( ) . starts with ( name ) ) { return true ; } } return false ; } ) ;,map contains string,fail,sub
<PLACE_HOLDER> 0 times should throw iae,try { parts = bytes . split ( low @$ high @$ __num__ ) ; assert true ( __str__ @$ false ) ; } catch ( illegal argument exception iae ) { },case throw iae,fail,sub
6 th build @$ <PLACE_HOLDER> @$ accumulation continues up to this point,scm . add change ( ) . with author ( __str__ ) ; p . get builders list ( ) . clear ( ) ; b = j . build and assert success ( p ) ; assert culprits ( b @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ ) ;,th build need,fail,obj
and if still not found @$ let <PLACE_HOLDER> choose default ?,if ( name == null ) { name = _default type id ( cls ) ; },s ' choose default,fail,sub
most likely client <PLACE_HOLDER> closed socket,if ( t instanceof socket exception ) { get logger ( ) . info ( __str__ + __str__ ) ; return ; },side closed socket,fail,sub
next <PLACE_HOLDER> does n't correctly handle dt ds,if ( event == xml stream constants . start_document ) { while ( ! stax stream reader . is start element ( ) ) event = stax stream reader . next ( ) ; },spec handle ds,fail,sub
master holds the <PLACE_HOLDER> @$ so restart the master .,if ( server . equals ( cluster status . get master name ( ) ) ) { restart master ( server @$ sleep time ) ; } else { restart rs ( server @$ sleep time ) ; },master holds lock,fail,obj
the client must not send the <PLACE_HOLDER> .,assert false ( trailers latch . await ( __num__ @$ time unit . seconds ) ) ;,client send product,fail,obj
replication scope allows <PLACE_HOLDER> @$ and does not require empty directories,if ( replication spec . is in replication scope ( ) ) { return ; },scope allows itself,fail,obj
subsequent error triggers does n't trigger another <PLACE_HOLDER>,tracker . process response ( new response ( __str__ @$ null ) @$ __str__ @$ __num__ ) ; assert tracker mismatch count ( tracker @$ __num__ ) ;,triggers trigger countdown,fail,obj
register the chat window <PLACE_HOLDER> bar item .,container filter . put ( container . container_id @$ container . container_chat_menu_bar . getid ( ) ) ; bundle context . register service ( plugin component factory . class . get name ( ) @$ new otr plugin component factory ( container . container_chat_menu_bar ) @$ container filter ) ;,container bar item,fail,sub
verify the widget will now display white <PLACE_HOLDER>,attack plugin . on varbit changed ( new varbit changed ( ) ) ; warned skills = attack plugin . get warned skills ( ) ; assert true ( warned skills . contains ( skill . attack ) ) ; assert false ( attack plugin . is warned skill selected ( ) ) ;,widget display tags,fail,obj
block until submissions create further <PLACE_HOLDER>,if ( m_clients pending notification . is empty ( ) ) { run submissions ( true ) ; m_limiter = rate limiter . create ( notification_rate @$ warmup_ms @$ time unit . milliseconds ) ; } else { run submissions ( false ) ; },submissions create notifications,fail,obj
note : <PLACE_HOLDER> and wsdl have no rules,return arrays . as list ( __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ ) ;,gwt have rules,fail,sub
<PLACE_HOLDER> reports time in nanoseconds across all processors .,cpu time /= __num__ * os . get available processors ( ) ; double cpu = __num__ ; if ( prev cpu time > __num__ ) { long cpu time diff = cpu time - prev cpu time ; cpu = math . min ( __num__ @$ ( double ) cpu time diff / metrics_update_freq ) ; },sys reports time,fail,sub
be aware the legacy <PLACE_HOLDER> is not signaling truncate events,parser . signal truncate table ( table id @$ ctx ) ; super . enter truncate table ( ctx ) ;,command signaling events,fail,sub
lazy definition of schema : do not write empty <PLACE_HOLDER>,final boolean solrlazy = get config bool ( switchboard constants . federated_service_solr_indexing_lazy @$ true ) ;,definition write tables,fail,obj
seems awkward to have the stream wrap <PLACE_HOLDER> .,super ( wrapped @$ wrapped . get http request ( ) ) ; this . wrapped = wrapped ;,stream wrap method,fail,obj
track the <PLACE_HOLDER> reported online regions in memory .,synchronized ( rs reports ) { rs reports . put ( server name @$ region names ) ; } if ( region names . is empty ( ) ) { log . trace ( __str__ @$ server name ) ; return ; },server reported regions,fail,sub
buck <PLACE_HOLDER> should allow nonexistent targets without throwing .,buck config test utils . create with default filesystem ( temporary folder @$ reader ) ;,tests allow targets,fail,sub
<PLACE_HOLDER> use the context to log messages,when ( delta session manager . get the context ( ) ) . then return ( mock ( context . class ) ) ; when ( delta session manager . get the context ( ) . get logger ( ) ) . then return ( mock ( log . class ) ) ;,now use context,fail,sub
given that a second user has selected the bubble clock <PLACE_HOLDER>,when ( m mock settings wrapper . get lock screen custom clock face ( secondary_user_id ) ) . then return ( bubble_clock ) ;,user selected channel,fail,obj
generate the map join <PLACE_HOLDER>,return map join processor . convertsmb join to map join ( physical context . get conf ( ) @$ newsmb join op @$ map join pos @$ true ) ;,map join processor,fail,obj
while wbmp reader does not support ext wbmp <PLACE_HOLDER>,if ( type != __num__ || fix header field != __num__ ) { return false ; },reader support header,fail,obj
modern <PLACE_HOLDER> always support densities .,application density = display metrics . density_device ; application scale = __num__ ; application inverted scale = __num__ ; final int expandable = __num__ ; final int large_screens = __num__ ; final int xlarge_screens = __num__ ; int size info = __num__ ;,devices support densities,fail,sub
permission <PLACE_HOLDER> from server response will have the priority for accuracy .,if ( this . permission != null ) { perm arg = this . permission ; },arguments have priority,fail,sub
<PLACE_HOLDER> 4 occupies last two octets,if ( index > octets . length - __num__ || index > __num__ ) { return false ; },bytes occupies octets,fail,sub
zap : added the <PLACE_HOLDER> .,extension hook . get hook view ( ) . add option panel ( get options database panel ( ) ) ; extension hook . get hook view ( ) . add option panel ( get options jvm panel ( ) ) ;,zap added listener,fail,obj
<PLACE_HOLDER> must have real keyboard focus .,if ( ! m host . is focused ( ) && ! m host . request focus ( ) ) { return false ; },host have focus,success,sub
this can only happen if someone uses unchecked <PLACE_HOLDER> .,if ( extension . get containing type default instance ( ) != get default instance for type ( ) ) { throw new illegal argument exception ( __str__ + __str__ ) ; },someone uses operations,success,obj
<PLACE_HOLDER> of the 2 threads should get an optimistic lock exception,assert equals ( __num__ @$ exceptions . size ( ) ) ; assert true ( exceptions . get ( __num__ ) instanceof activiti optimistic locking exception ) ;,one get exception,success,sub
update <PLACE_HOLDER> should not update any caches since they are both unregistered,m network score service . update scores ( new scored network [ ] { scored_network } ) ;,scores update caches,success,sub
it 's an array field type @$ lets <PLACE_HOLDER> the inner type,inner field type . check compatibility ( ( ( array field type ) other ) . inner field type @$ conflicts @$ strict ) ;,type lets check,success,obj
can specify orientation if app does n't fill <PLACE_HOLDER> .,assert equals ( screen_orientation_landscape @$ m token . get orientation ( ) ) ; m token . set fills parent ( true ) ; m token . set hidden ( true ) ; m token . sending to bottom = true ;,app fill parent,success,obj
end if : got four <PLACE_HOLDER>,if ( i == __num__ ) { return - __num__ ; } else { throw new java . io . io exception ( __str__ ) ; },end got characters,success,obj
only global stats make <PLACE_HOLDER>,_total stats . register buffer metrics ( r @$ s @$ since @$ free space ) ;,stats make sense,success,obj
all surrogate <PLACE_HOLDER> with this lead surrogate have only irrelevant data,if ( ( norm32 & mask ) == __num__ ) { return __num__ ; } else { return get norm32 from surrogate pair ( norm32 @$ args . c ) ; },pairs have data,success,sub
make sure users with huge dict do n't blow up the <PLACE_HOLDER>,if ( dict . size ( ) <= __num__ ) { user dict cache . put ( user id @$ dict ) ; } else { logger . info ( __str__ + dict . size ( ) + __str__ + user id + __str__ ) ; },users blow cache,success,obj
reading saved <PLACE_HOLDER> from ignite .,list < list < ? > > data = cache . query ( new sql fields query ( __str__ ) ) . get all ( ) ; system . out . println ( data ) ;,reading saved data,success,obj
use a small long here which will only occupy one property <PLACE_HOLDER>,my node . set property ( __str__ @$ small value ) ; tx . commit ( ) ;,which occupy block,success,obj
second <PLACE_HOLDER> will violate the primary key constraint,volt queuesql ( insertp1 @$ __num__ @$ __num__ ) ; volt executesql ( ) ;,insert violate constraint,success,sub
ensure moving task between two stacks <PLACE_HOLDER> resumed activity,r . set state ( resumed @$ __str__ ) ; assert equals ( r @$ m stack . get resumed activity ( ) ) ; final activity stack dest stack = m root activity container . get default display ( ) . create stack ( windowing_mode_fullscreen @$ activity_type_standard @$ true ) ;,updates resumed activity,success,sub
query must produce only <PLACE_HOLDER> from single region .,validate clients ( region id @$ clients2 ) ; if ( region id == unmapped_region ) fail ( ) ;,query produce results,success,obj
no rows match purge <PLACE_HOLDER>,verify proc fails ( client @$ __str__ @$ __str__ @$ __num__ @$ __num__ @$ __num__ @$ __str__ @$ __num__ ) ; client response cr = client . call procedure ( __str__ @$ __str__ + __str__ + __str__ ) ; assert equals ( client response . success @$ cr . get status ( ) ) ;,rows match criteria,success,obj
compile <PLACE_HOLDER> will automatically reset the perf logger,if ( ! already compiled ) { compile internal ( command @$ true ) ; } else { driver context . get plan ( ) . set query start time ( driver context . get query display ( ) . get query start time ( ) ) ; },internal reset logger,success,sub
fake a replay finished <PLACE_HOLDER> for site 1,rejoin message msg1 = new rejoin message ( __num__ @$ rejoin message . type . replay_finished ) ; m_coordinator . deliver ( msg1 ) ;,replay finished response,success,obj
be more forgiving of not finding the get listener <PLACE_HOLDER> .,method method = introspector . find method ( source class @$ get listener method name @$ __num__ ) ; if ( method != null ) { set get listener method ( method ) ; },the get method,success,obj
the <PLACE_HOLDER> only contains the fallback behavior,assert . assert true ( router facade . global policy map . contains key ( def queue key ) && router facade . global policy map . size ( ) == __num__ ) ;,facade contains behavior,success,sub
j label contains html <PLACE_HOLDER>,if ( at != null ) { return at . get before index ( part @$ index ) ; },label contains text,success,obj
method name can not use reserved <PLACE_HOLDER> @$ e.g . return,if ( is reserved word ( operation id ) ) { logger . warn ( operation id + __str__ + camelize ( sanitize name ( __str__ + operation id ) ) ) ; operation id = __str__ + operation id ; } return camelize ( operation id ) ;,name use keyword,success,obj
apps can set the interception <PLACE_HOLDER> other than the direct parent .,final view group parent ; if ( m touch interception view group == null ) { parent = ( view group ) get parent ( ) ; } else { parent = m touch interception view group ; },apps set target,success,obj
join keys have difference <PLACE_HOLDER> ?,if ( k1 . size ( ) != k2 . size ( ) ) { return k1 . size ( ) - k2 . size ( ) ; } if ( comparators . length == __num__ ) { return __num__ ; },keys have sizes,success,obj
valve use the <PLACE_HOLDER> to log messages,when ( delta session manager . get the context ( ) ) . then return ( mock ( context . class ) ) ; when ( delta session manager . get the context ( ) . get logger ( ) ) . then return ( mock ( log . class ) ) ;,valve use context,success,obj
empty if nobody has the specified global <PLACE_HOLDER>,query = permission query . builder ( ) . set organization uuid ( organization . get uuid ( ) ) . set permission ( __str__ ) . build ( ) ; expect permissions ( query @$ empty list ( ) ) ;,nobody has permission,success,obj
the replica sets have different <PLACE_HOLDER> ...,if ( ! this . replica sets by name . key set ( ) . equals ( prior state . replica sets by name . key set ( ) ) ) { return true ; },sets have names,success,obj
assert valid line cnt specified equals the successfully inserted line <PLACE_HOLDER>,assert equals ( valid line cnt @$ line count ) ; assert equals ( invalid line cnt @$ invalidlinecnt ) ;,cnt equals count,success,obj
this <PLACE_HOLDER> wraps the results <PLACE_HOLDER> and guarantees the scrolling behaviour,j panel wrapper = new j panel ( new border layout ( ) ) ; wrapper . set background ( color scheme . dark_gray_color ) ; wrapper . add ( search items panel @$ border layout . north ) ;,panel wraps panel,success,sub
id types can use int <PLACE_HOLDER> .,if ( type == scalars . graphqlid && string value . matches ( __str__ ) ) { return int value . new int value ( ) . value ( new big integer ( string value ) ) . build ( ) ; },types use literals,success,obj
check whether the callable threw an <PLACE_HOLDER> .,if ( future . is done ( ) ) { try { future . get ( ) ; } catch ( interrupted exception e ) { thread . current thread ( ) . interrupt ( ) ; throw new runtime exception ( e ) ; } it . remove ( ) ; },callable threw exception,success,obj
verify that file <PLACE_HOLDER> does not support unix attributes,try { cfg . file system . read attributes ( path @$ __str__ ) ; throw e ; } catch ( unsupported operation exception unsupported ) { } catch ( io exception ioe ) { throw new runtime exception ( ioe ) ; },system support attributes,success,sub
make sure map only contains correct <PLACE_HOLDER>,this . extensions = collections . checked map ( new hash map < > ( ) @$ string . class @$ extension . class ) ; this . extensions . put all ( extensions ) ;,map contains types,success,obj
close <PLACE_HOLDER> 2 and pause so <PLACE_HOLDER> has a chance to close,close server ( server2 ) ; wait . pause ( __num__ * __num__ ) ; wait for cqs disconnected ( client @$ __str__ @$ __num__ ) ;,server has chance,success,sub
assume <PLACE_HOLDER> always has a parent,if ( is root ( path ) ) { return true ; } string parent key = get parent path ( path ) ; return parent key != null && is directory ( parent key ) ;,root has parent,success,sub
page transformers can do complex <PLACE_HOLDER> that benefit from hardware layers .,if ( m page transformer != null ) { enable layers ( new state != scroll_state_idle ) ; },transformers do things,success,obj
the processor does n't taint the consumer <PLACE_HOLDER> which has already finished,span processor span = take span ( consumer spans ) ; assert that ( processor span . id ( ) ) . is not equal to ( consumer span . id ( ) ) ;,processor taint span,success,obj
the log level would actually allow a <PLACE_HOLDER> to be logged .,if ( log warnings ) { try { walk warnings ( statement . get warnings ( ) @$ handler ) ; } catch ( sql exception sql exception ) { log . debug ( __str__ @$ sql exception ) ; } },level allow warning,success,obj
this is only available after the <PLACE_HOLDER> initialized the serializer,type serializer < string > value serializer = kv id . get serializer ( ) ;,backend initialized serializer,success,sub
now do get <PLACE_HOLDER> on created mapfile .,map file . reader reader = new map file . reader ( qualified dir name @$ conf ) ; try { assert equals ( null @$ reader . mid key ( ) ) ; } finally { reader . close ( ) ; },now get closest,success,obj
does the <PLACE_HOLDER> have optimization info ?,if ( class optimization info . get class optimization info ( library class ) != null ) { class visitor . visit library class ( library class ) ; },class have info,success,sub
enable table @$ <PLACE_HOLDER> retain assignment to assign regions .,admin . enable table ( table name ) . join ( ) ; list < h region location > regions2 = async meta table accessor . get tableh region locations ( meta table @$ table name ) . get ( ) ;,use retain assignment,success,sub
no real charset @$ so let the <PLACE_HOLDER>,if ( code . equals ( http post body util . transfer encoding mechanism . binary . value ( ) ) ) { mechanism = transfer encoding mechanism . binary ; } else { throw new error data decoder exception ( __str__ + code ) ; },charset let default,success,obj
noinspection object <PLACE_HOLDER> in loop,if ( insertion index >= key bucket . size ( ) ) { entry = key bucket . get entry ( insertion index - __num__ @$ key serializer @$ value serializer ) ; } else { entry = key bucket . get entry ( insertion index @$ key serializer @$ value serializer ) ; },noinspection object allocation,success,obj
assert that the <PLACE_HOLDER> created still has no hcat instrumentation,table table2 = client . get table ( __str__ @$ __str__ ) ; assert . assert true ( table2 . get sd ( ) . get input format ( ) . equals ( h cat constants . hive_rcfile_if_class ) ) ; driver . run ( __str__ ) ;,table has instrumentation,success,sub
confirm that <PLACE_HOLDER> with state a will reject replication request .,verify replication request rejection ( util1 @$ true ) ; verify replication request rejection ( util2 @$ false ) ; util1 . get admin ( ) . disable replication peer ( peer_id ) ; write ( util1 @$ __num__ @$ __num__ ) ; thread . sleep ( __num__ ) ;,peer reject request,success,sub
window do fn oper<PLACE_HOLDER>tor does not use <PLACE_HOLDER> do fn,this . requires stable input = do fn != null && do fn signatures . get signature ( do fn . get class ( ) ) . process element ( ) . requires stable input ( ) ;,a do fn,success,sub
both should have the same <PLACE_HOLDER> of servers .,assert equals ( first balancer . get no of servers ( ) @$ second balancer . get no of servers ( ) ) ;,both have number,success,obj
remove the filter popup if the <PLACE_HOLDER> has cleared all text,if ( showing && length == __num__ ) { dismiss popup ( ) ; m filtered = false ; },user cleared text,success,sub
<PLACE_HOLDER> decrypts the message using the sender 's public key,byte [ ] decrypt bytes = receiver . decrypt data ( encrypted challenge ) ;,receiver decrypts message,success,sub
if the <PLACE_HOLDER> sets a message id @$ use it .,final string message id = one way feature . get message id ( ) ; if ( ! is message id added && message id != null ) { headers . add ( new string header ( av . messageid tag @$ message id ) ) ; },user sets id,success,sub
health check satisfies <PLACE_HOLDER> config health conditions,probe result consumer . accept ( new probe result ( probe factory . get workspace id ( ) @$ probe factory . get machine name ( ) @$ probe factory . get server name ( ) @$ probe status . passed ) ) ;,check satisfies probe,success,obj
check that <PLACE_HOLDER> starting event occurs before <PLACE_HOLDER> started event,assert true ( listener . starting time <= listener . started time @$ __str__ ) ;,the started event,success,sub
add all the <PLACE_HOLDER>s with proper context add first <PLACE_HOLDER>,outputqueue = chain . create blocking queue ( ) ; chain . add mapper ( context @$ outputqueue @$ __num__ ) ;,mappers add mapper,success,obj
run the <PLACE_HOLDER> means driver,path answer = new path ( output @$ __str__ ) ; k means driver . run ( conf @$ data @$ initialclusters @$ answer @$ convergence delta @$ max iterations @$ true @$ __num__ @$ false ) ;,k means driver,success,sub
freeze failed when freeze amount less than 1 <PLACE_HOLDER>,ret1 = freeze balance2 ( from address @$ __num__ @$ __num__ @$ test key002 ) ; assert . assert equals ( ret1 . get code ( ) @$ grpcapi . return . response_code . contract_validate_error ) ; assert . assert equals ( ret1 . get message ( ) . to string utf8 ( ) @$ __str__ ) ;,freeze amount trx,success,obj
the user <PLACE_HOLDER> captures context,assert true ( results . is context initialized observe on . get ( ) ) ;,scheduler captures context,success,sub
resources missing from used are using <PLACE_HOLDER> of that resource,if ( i >= used . other resources . length ) { return __num__ ; },resources using none,success,obj
bad value prevents <PLACE_HOLDER> to next .,trigger action in cell editor ( key event . vk_tab ) ; assert is editing field ( __num__ @$ dt col num ) ;,value prevents move,success,obj
if there are quotes @$ build a <PLACE_HOLDER> wide list,if ( quote annotator . gather quotes ( this . annotation document ) != null ) build document quotes list ( ) ;,list build document,success,obj
media controller.set playlist does not ensure the <PLACE_HOLDER> of the items .,for ( int i = __num__ ; i < list . size ( ) ; i ++ ) { assert equals ( list . get ( i ) @$ m player . m playlist . get ( i ) . get media id ( ) ) ; },media ensure equality,success,obj
catcher also receives the <PLACE_HOLDER> @$ prepended :,catch args . add ( __num__ @$ thrown ) ; helper . assert called ( __str__ @$ catch args ) ; asserteq ( cast . apply ( catch args ) @$ returned ) ;,catcher receives exception,success,obj
does unaltered <PLACE_HOLDER> still match ref <PLACE_HOLDER> ?,bos . reset ( ) ; bs ref . serialize ( b ref @$ bos ) ; ser deser ( bs @$ b1 @$ bos . to byte array ( ) @$ null @$ null ) ;,block match block,success,obj
old <PLACE_HOLDER> stored elements with no nr when not specified,if ( nr == __num__ && node . has property ( code ) ) { return node . get property ( code ) . get long ( ) ; } else { return __num__ ; },pur stored elements,success,sub
call matrix changed <PLACE_HOLDER> if needed,if ( m matrix change listener != null ) { rectf display rect = get display rect ( matrix ) ; if ( display rect != null ) { m matrix change listener . on matrix changed ( display rect ) ; } },matrix changed listener,success,obj
check that <PLACE_HOLDER> under test throws npe,try { epki . get key spec ( ( key ) null @$ __str__ ) ; fail ( get name ( ) + __str__ ) ; } catch ( null pointer exception ok ) { },method throws npe,success,sub
<PLACE_HOLDER> 's actually create cache on non affinity server .,srv3 . cache ( query utils . create table cache name ( query utils . dflt_schema @$ __str__ ) ) ;,let create cache,success,sub
set capacity will change <PLACE_HOLDER> of underlying byte array,buf . set capacity ( start size ) ; assert equals ( start size @$ buf . capacity ( ) ) ; check buffer ( buf @$ empty ) ;,capacity change length,success,obj
completing the task will end the process <PLACE_HOLDER>,task service . complete ( task . get id ( ) ) ; assert process ended ( proc id ) ;,task end instance,success,obj
we bypass the <PLACE_HOLDER> equals method that resolve the hostname,assert that ( slave . get channel ( ) . call ( new url builder callable ( __str__ ) ) @$ not ( equal to ( slave . get channel ( ) . call ( new url builder callable ( __str__ ) ) ) ) ) ;,standard equals method,success,sub
<PLACE_HOLDER> release the queue @$ but still is single thread,if ( _buffer . get cursor ( ) > _consumer . get ( ) ) consume batch when available ( handler ) ;,asynchronous release queue,success,sub
ensure a timer throws an illegal state <PLACE_HOLDER> if task already cancelled,t = new timer ( ) ; test task = new timer test task ( ) ; test task . cancel ( ) ; try { t . schedule ( test task @$ __num__ @$ __num__ ) ; fail ( __str__ ) ; } catch ( illegal state exception expected ) { } t . cancel ( ) ;,timer throws exception,success,obj
run the <PLACE_HOLDER> kill command,buck kill command handler handler = new buck kill command handler ( project @$ buck command . kill ) ; buck build manager . get instance ( project ) . run buck command while connected to buck ( handler @$ action_title @$ buck module ) ;,buck kill command,success,sub
if the <PLACE_HOLDER> has population @$ increase the distinct <PLACE_HOLDER> count,if ( hist [ color ] > __num__ ) { distinct color count ++ ; },color has population,success,sub
currently get imported keys always returns an empty <PLACE_HOLDER> for hive,result set res = dbmd . get imported keys ( null @$ null @$ null ) ; result set meta data md = res . get meta data ( ) ; assert equals ( md . get column count ( ) @$ __num__ ) ; assert false ( res . next ( ) ) ;,keys returns resultset,success,obj
this job does not return any <PLACE_HOLDER> .,return integer . parse int ( this . < string > argument ( __num__ ) ) ;,job return result,success,obj
<PLACE_HOLDER> if : got four characters,if ( i == __num__ ) { return - __num__ ; } else { throw new java . io . io exception ( __str__ ) ; },end got characters,success,sub
this one will overflow <PLACE_HOLDER> .,wseg = buf . offer ( size ) ; bbuf = wseg . buffer ( ) ; bbuf . put long ( __num__ ) ; wseg . release ( ) ;,one overflow buffer,success,obj
<PLACE_HOLDER> collect methods for all superinterfaces .,for ( class doc superintf : intf . interfaces ( ) ) { if ( ! collect remote methods ( superintf @$ table ) ) { errors = true ; } } return ! errors ;,recursively collect methods,success,sub
generate the <PLACE_HOLDER> join operator,return map join processor . convertsmb join to map join ( physical context . get conf ( ) @$ newsmb join op @$ map join pos @$ true ) ;,map join operator,success,sub
by some reason many hive errors have this sql <PLACE_HOLDER>,if ( sql state . sql_08s01 . get code ( ) . equals ( sql state ) ) { return error type . normal ; },errors have state,success,obj
ensure wrapper view <PLACE_HOLDER> has a header,wrapper view wrapper view child = ( wrapper view ) child ; if ( ! wrapper view child . has header ( ) ) { continue ; },child has header,success,sub
verify that file <PLACE_HOLDER> does not support unix attributes,try { cfg . file system . read attributes ( path @$ __str__ ) ; throw e ; } catch ( unsupported operation exception unsupported ) { } catch ( io exception ioe ) { throw new runtime exception ( ioe ) ; },system support attributes,success,sub
ruby <PLACE_HOLDER> should set the path unescaped in the api file,assert true ( file utils . read file to string ( file @$ standard charsets . utf_8 ) . contains ( __str__ ) ) ;,client set path,success,sub
strip auth <PLACE_HOLDER> from result .,result . remove ( account manager . key_authtoken ) ; if ( log . is loggable ( tag @$ log . verbose ) ) { log . v ( tag @$ get class ( ) . get simple name ( ) + __str__ + response ) ; },strip auth token,success,obj
composition needs one <PLACE_HOLDER> to be the container .,if ( relationship category == relationship category . composition ) { throw new atlas base exception ( atlas error code . relationshipdef_composition_no_container @$ name ) ; } else if ( relationship category == relationship category . aggregation ) { throw new atlas base exception ( atlas error code . relationshipdef_aggregation_no_container @$ name ) ; },composition needs end,success,obj
it 's an array field <PLACE_HOLDER> @$ lets check the inner <PLACE_HOLDER>,inner field type . check compatibility ( ( ( array field type ) other ) . inner field type @$ conflicts @$ strict ) ;,type lets check,success,sub
make sure eviction <PLACE_HOLDER> has entered run method,while ( ! eviction thread . is entering run ( ) ) { thread . sleep ( __num__ ) ; },thread entered method,success,sub
model name can not use reserved <PLACE_HOLDER> @$ e.g . return,if ( is reserved word ( camelized name ) ) { final string model name = __str__ + camelized name ; logger . warn ( camelized name + __str__ + model name ) ; return model name ; },name use keyword,success,obj
read <PLACE_HOLDER> write object indicator,boolean called default write object = read boolean ( ) ; read object state . begin unmarshal custom value ( this @$ called default write object @$ ( current class desc . read object method != null ) ) ; if ( current class desc . has read object ( ) ) set state ( in_read_object_remote_not_custom_marshaled ) ;,default write indicator,success,sub
saved persons will have same <PLACE_HOLDER>,person1 . field ( __str__ @$ __str__ ) . save ( ) ; person2 . field ( __str__ @$ __str__ ) . save ( ) ; person3 . field ( __str__ @$ __str__ ) . save ( ) ;,persons have name,success,obj
enum <PLACE_HOLDER> needed imports for jackson 's json creator,if ( additional properties . contains key ( serialization_library_jackson ) ) { model . imports . add ( __str__ ) ; model . imports . add ( __str__ ) ; },class needed imports,success,sub
first client that connects completes this <PLACE_HOLDER> .,if ( ! connected client . set ( multiplexer ) ) { additional multiplexers . offer ( multiplexer ) ; } try { return connected client . get ( ) . get inbound observer ( ) ; } catch ( interrupted exception | execution exception e ) { throw new runtime exception ( e ) ; },client completes future,success,obj
error arises because user has specified case sensitive affinity column <PLACE_HOLDER>,grid test utils . assert throws ( null @$ new callable < object > ( ) { @ override public object call ( ) throws exception { execute ( __str__ ) ; return null ; } } @$ ignitesql exception . class @$ __str__ ) ;,user specified name,success,obj
0 : incorrect <PLACE_HOLDER> since hbm.xml ca n't enable natural id caching,assert equals ( __num__ @$ session factory ( ) . get statistics ( ) . get natural id query execution count ( ) ) ;,stats enable caching,success,sub
this version gives a <PLACE_HOLDER> that rest li runs,request < string > req = builders . < string > action ( __str__ ) . build ( ) ; get client ( ) . send request ( req ) . get response ( ) ;,version gives task,success,obj
given on lock screen and stack scroller has a nonzero <PLACE_HOLDER>,given lock screen ( ) ; m notification stack height = __num__ ; m keyguard status height = empty_height ;,scroller has height,success,obj
response <PLACE_HOLDER> will make the headers unmodifiable,final map < string @$ string > modifiable headers = new tree map < string @$ string > ( string . case_insensitive_order ) ; modifiable headers . put all ( raw response . get headers ( ) ) ;,impl make unmodifiable,success,sub
1 : no stats since hbm.xml ca n't enable natural id <PLACE_HOLDER>,assert equals ( __num__ @$ session factory ( ) . get statistics ( ) . get natural id cache put count ( ) ) ;,stats enable caching,success,obj
ghost <PLACE_HOLDER> will have a null logger,if ( existing node . get logger ( ) != null ) { existing node . get logger ( ) . debug ( __str__ @$ new object [ ] { id @$ new type @$ bundle coordinate } ) ; } final extension manager extension manager = flow controller . get extension manager ( ) ;,components have logger,success,sub
<PLACE_HOLDER> object allocation in loop,bucket = new osb tree bucketv1 < > ( cache entry ) ; if ( item index == osb tree bucketv1 . max_page_size_bytes + __num__ ) { item index = bucket . size ( ) - __num__ ; },noinspection object allocation,success,sub
<PLACE_HOLDER> should not contain any footers at initialization,assert null ( table . get column footer ( __str__ ) ) ; assert null ( table . get column footer ( __str__ ) ) ; assert null ( table . get column footer ( __str__ ) ) ;,table contain footers,success,sub
all symbols must have declaration <PLACE_HOLDER> .,check not null ( decl node ) ; return declare symbol ( sym . get name ( ) @$ get type ( sym ) @$ is type inferred ( sym ) @$ scope @$ decl node @$ sym . getjs doc info ( ) ) ;,symbols have nodes,success,obj
<PLACE_HOLDER> does n't set a result on profile,assert false ( response . to string ( ) @$ response . has defined ( result ) ) ;,handler set result,success,sub
the used <PLACE_HOLDER> should still 4 gb and negative available <PLACE_HOLDER>,wait memory ( scheduler @$ nm id @$ __num__ * gb @$ - __num__ * gb @$ __num__ @$ __num__ * __num__ ) ;,resource and resource,success,sub
<PLACE_HOLDER> uses jni and does not work in local mode,if ( ! nimbus client . is local override ( ) ) { worker metrics . put ( __str__ @$ __str__ ) ; },sigar uses jni,success,sub
subsequent discoveries should not find <PLACE_HOLDER>,list < kafka topic partition > second discovery = partition discoverer . discover partitions ( ) ; list < kafka topic partition > third discovery = partition discoverer . discover partitions ( ) ; assert equals ( __num__ @$ second discovery . size ( ) ) ; assert equals ( __num__ @$ third discovery . size ( ) ) ;,discoveries find anything,success,obj
check request size will throw io <PLACE_HOLDER> if request is rejected,if ( is large request ( length ) ) { check request size when message received ( length ) ; si . set large request size ( length ) ; },size throw exception,success,obj
no container to cleanup . cleanup app level <PLACE_HOLDER> .,if ( app . containers . is empty ( ) ) { app . handle app finish with containers cleanedup ( ) ; return application state . application_resources_cleaningup ; },container app resources,success,obj
<PLACE_HOLDER> choose server alias for rsa keys .,results rsa = km . choose server alias ( __str__ @$ null @$ null ) ; if ( results rsa == null ) { throw new exception ( __str__ ) ; } system . out . println ( __str__ ) ;,check choose alias,success,sub
remember that these elements got <PLACE_HOLDER>,for ( element element : instance . non zeroes ( ) ) { int j = element . index ( ) ; update steps . set quick ( j @$ get step ( ) ) ; update counts . increment quick ( j @$ __num__ ) ; } next step ( ) ;,elements got updated,success,obj
get <PLACE_HOLDER> managed entity through the repository,message message = message repository . find one ( __num__ ) ; assert not null ( message ) ; assert equals ( __str__ @$ message . get text ( ) ) ;,jpa managed entity,success,sub
string all matches fruit <PLACE_HOLDER>,do xquery test ( xml_snippet @$ __str__ @$ arrays . as list ( fruit names ) ) ;,all matches names,success,obj
the new calc <PLACE_HOLDER> must match the original sort <PLACE_HOLDER>,result = calc . copy ( calc . get trait set ( ) . replace ( orig sort collation ) @$ index scan @$ calc . get program ( ) @$ calc . get split count ( ) ) ;,collation match collation,success,sub
this operation does not change the current <PLACE_HOLDER> of the file,if ( n > __num__ ) { decrypt ( position @$ buffer @$ offset @$ n ) ; },operation change offset,success,obj
client sent an ack lds <PLACE_HOLDER> .,verify ( request observer ) . on next ( eq ( build discovery request ( node @$ __str__ @$ __str__ @$ xds client impl . ads_type_url_lds @$ __str__ ) ) ) ;,client sent request,success,obj
a long does not match empty <PLACE_HOLDER>,assert filter matches skip vectorize ( edf ( __str__ ) @$ immutable list . of ( ) ) ;,long match string,success,obj
new <PLACE_HOLDER> should have only 1 key,root . go to ( read cursor ) ; assert equals ( __num__ @$ key count ( ) ) ;,root have key,success,sub
a <PLACE_HOLDER> preview frame comes . request a frame .,byte [ ] picture = new byte [ length ] ; frame frame = manager . get frame ( picture @$ __num__ @$ __num__ ) ;,camera request frame,success,sub
fetch the <PLACE_HOLDER> complete text view and set an adapter,auto complete text view actv = find view by id ( r . id . widgets_autocompletetextview ) ; actv . set adapter ( new array adapter < > ( this @$ android . r . layout . simple_dropdown_item_1line @$ cheeses . s cheese strings ) ) ;,auto complete view,success,sub
retry with the old formatter <PLACE_HOLDER> uses synchronization locks,try { parsed = generic formatter . short_day_formatter . parse ( date str @$ __num__ ) . get time ( ) ; } catch ( final parse exception pe ) { parsed = new date ( ) ; },which uses locks,success,sub
enable table @$ use retain <PLACE_HOLDER> to assign regions .,admin . enable table ( table name ) . join ( ) ; list < h region location > regions2 = async meta table accessor . get tableh region locations ( meta table @$ table name ) . get ( ) ;,use retain assignment,success,obj
second <PLACE_HOLDER> joins election @$ becomes standby .,electors [ __num__ ] . join election ( app datas [ __num__ ] ) ; mockito . verify ( cbs [ __num__ ] @$ mockito . timeout ( __num__ ) ) . become standby ( ) ; check fatals and reset ( ) ;,elector joins election,success,sub
an <PLACE_HOLDER> will get the reloadable static state manager instance,assert equals ( __str__ @$ to string field ( itype . bytes loaded @$ __str__ ) ) ;,interface get instance,success,sub
do null <PLACE_HOLDER> buffer test case,if ( ! null byte buffer test ( the mac ) ) { system . out . println ( __str__ ) ; return false ; } return true ;,byte buffer case,success,sub
removals in array list wo n't break <PLACE_HOLDER>,boolean changed = new list . remove ( o ) ; list = collections . unmodifiable list ( new list ) ; return changed ;,removals break sorting,success,obj
the current item has higher <PLACE_HOLDER>,final int current index = play queue . get index ( ) ; final play queue item current item = play queue . get item ( current index ) ; if ( current item == null ) return null ;,item has priority,success,obj
second <PLACE_HOLDER> must not log another message,assert that ( under test . is operational ( ) ) . is false ( ) ; assert that ( memory appender . events ) . extracting ( i logging event :: get level @$ i logging event :: get message ) . contains only once ( tuple ( level . info @$ __str__ ) ) ;,call log message,success,sub
remove <PLACE_HOLDER> should also be clearing the last modified <PLACE_HOLDER>,m exif . remove timestamp ( ) ; assert that ( m exif . get last modified timestamp ( ) ) . is equal to ( exif . invalid_timestamp ) ;,timestamp clearing timestamp,success,sub
pass empty name as child reference @$ should return parent <PLACE_HOLDER>,logger log2 = log . get logger ( __str__ ) ; assert that ( __str__ @$ log2 . get name ( ) @$ is ( __str__ ) ) ; assert same ( log2 @$ log @$ __str__ ) ;,name return logger,success,obj
any <PLACE_HOLDER> on the power button stops the accessibility shortcut,cancel pending accessibility shortcut action ( ) ; result &= ~ action_pass_to_user ; is wake key = false ;,activity stops shortcut,success,sub
foo has the <PLACE_HOLDER> and length of ` super `,node super dotg replacement = prototype . get first child ( ) ; assert node ( super dotg replacement ) . matches qualified name ( __str__ ) . has equal source info to ( source super ) ;,foo has position,success,obj
1 : no <PLACE_HOLDER> since hbm.xml ca n't enable natural id caching,assert equals ( __num__ @$ session factory ( ) . get statistics ( ) . get natural id cache put count ( ) ) ;,stats enable caching,success,sub
the <PLACE_HOLDER> join column for this specialized class .,long column vector join col vector = ( long column vector ) batch . cols [ single join column ] ; long [ ] vector = join col vector . vector ;,one join column,success,sub
stream 1 receives another <PLACE_HOLDER>,buffer = create message frame ( fake message ) ; frame handler ( ) . data ( false @$ __num__ @$ buffer @$ message frame length ) ; verify ( frame writer @$ timeout ( time_out_ms ) ) . window update ( eq ( __num__ ) @$ eq ( ( long ) __num__ * message frame length ) ) ;,stream receives message,success,obj
this <PLACE_HOLDER> may throw an io exception,while ( true ) { int bytes read = as . read ( loaded audio @$ loaded audio byte length @$ int len - loaded audio byte length ) ; if ( bytes read <= __num__ ) { as . close ( ) ; break ; } loaded audio byte length += bytes read ; },loop throw exception,success,sub
to avoid rejected execution <PLACE_HOLDER> in basic directory model wait a second,try { thread . sleep ( __num__ ) ; } catch ( interrupted exception e ) { throw new runtime exception ( e ) ; },exception wait second,success,sub
another producer has moved the <PLACE_HOLDER> failed to increment,so element ( buffer @$ calc element offset ( p index @$ mask ) @$ e ) ; so sequence ( s buffer @$ seq offset @$ p index + __num__ ) ; return true ;,producer moved sequence,success,obj
top horizontal <PLACE_HOLDER> croppped part,height = this . crop zone rect . y - this . image rect . y ; if ( height > __num__ ) { g . fill rect ( this . crop zone rect . x @$ this . image rect . y @$ this . crop zone rect . width @$ height ) ; },non croppped part,success,sub
synchronize so default <PLACE_HOLDER> does n't override other default <PLACE_HOLDER>,synchronized ( session ) { object result = session . get attribute ( name ) ; if ( result == null && default value != null ) { session . set attribute ( name @$ default value ) ; result = default value ; } return result ; },value override value,success,sub
the service group had an unknown <PLACE_HOLDER> !,if ( candidate services == null ) { _log . error ( __str__ + colo cluster variant ) ; return exception_exit_code ; },group had cluster,success,obj
this kinda assumes the right <PLACE_HOLDER>,for ( plan fragment f : select stmt . get fragments ( ) ) { if ( i != __num__ ) { select bottom frag = f ; } i ++ ; },kinda assumes order,success,obj
if java did atomic <PLACE_HOLDER> @$ this would be one,synchronized ( this ) { if ( auto registration running || auto registration complete ) { return ; } },java did blocks,success,obj
check whether each account matches the requested <PLACE_HOLDER>,m accounts with features = new array list < account > ( m accounts of type . length ) ; m current account = __num__ ; check account ( ) ;,account matches features,success,obj
first byte @$ assume no further <PLACE_HOLDER> .,return primary | ( ( base primary & __num__ ) + ( ( long ) offset << __num__ ) ) ;,byte assume overflow,success,obj
start the delete procedure & & kill the <PLACE_HOLDER>,long proc id = proc exec . submit procedure ( new delete table procedure ( proc exec . get environment ( ) @$ table name ) ) ;,procedure kill executor,success,obj
constructing <PLACE_HOLDER>n <PLACE_HOLDER> should trigger <PLACE_HOLDER>n injection,injector . get instance ( a . class ) ; assert equals ( __num__ @$ injections . get and set ( __num__ ) ) ;,a trigger injection,success,sub
uri parsing has <PLACE_HOLDER> .,try { uri oracle rac = uri . create ( __str__ + __str__ + __str__ + __str__ ) ; logger . debug ( oracle rac . to string ( ) ) ; logger . debug ( oracle rac . get scheme ( ) ) ; assert . fail ( ) ; } catch ( exception e ) { },parsing has limitation,success,obj
shrink data buffer id <PLACE_HOLDER>,int [ ] new data buffer id table = new int [ new index count ] ; system . arraycopy ( data buffer id table @$ __num__ @$ new data buffer id table @$ __num__ @$ new data buffer id table . length ) ; data buffer id table = new data buffer id table ;,data buffer table,success,obj
<PLACE_HOLDER> 6 has other global permission,user dto user6 = db . users ( ) . insert user ( with email ( __str__ ) ) ; db . users ( ) . insert permission on user ( organization1 @$ user6 @$ administer_quality_profiles ) ;,user has permission,success,sub
method <PLACE_HOLDER> can not use reserved keyword @$ e.g . return,if ( is reserved word ( operation id ) ) { logger . warn ( operation id + __str__ + camelize ( sanitize name ( __str__ + operation id ) @$ true ) ) ; operation id = __str__ + operation id ; } return camelize ( sanitize name ( operation id ) @$ true ) ;,name use keyword,success,sub
m total length contains the <PLACE_HOLDER> already,child left = get padding left ( ) + right - left - m total length ; break ; case gravity . center_horizontal :,length contains padding,success,obj
this <PLACE_HOLDER> always throws activation exception,user service . activate user ( __str__ ) . to blocking ( ) . single ( ) ;,method throws exception,success,sub
this <PLACE_HOLDER> gives a task that rest li runs,request < string > req = builders . < string > action ( __str__ ) . build ( ) ; get client ( ) . send request ( req ) . get response ( ) ;,version gives task,success,sub
empty selection not allowed @$ keep old <PLACE_HOLDER>,if ( ! is null selection allowed ( ) && s . is empty ( ) ) { mark as dirty ( ) ; return ; },selection keep value,success,obj
o auth encodes some <PLACE_HOLDER> differently :,return url decoder . decode ( url @$ __str__ ) . replace ( __str__ @$ __str__ ) . replace ( __str__ @$ __str__ ) ;,auth encodes characters,success,obj
ruby client should set the <PLACE_HOLDER> unescaped in the api file,assert true ( file utils . read file to string ( file @$ standard charsets . utf_8 ) . contains ( __str__ ) ) ;,client set path,success,obj
streams should have no <PLACE_HOLDER> .,path src = get test root path ( f sys @$ __str__ ) ; fs data output stream out = f sys . create ( src ) ; out . write char ( __str__ ) ;,streams have effect,success,obj
merge input <PLACE_HOLDER> : data <PLACE_HOLDER> override header <PLACE_HOLDER>,if ( fields from header != null ) { if ( ! ( fields from header instanceof point builder ) ) { throw new illegal state exception ( __str__ + fields from header ) ; } fields from data . merge with header ( ( point builder ) fields from header ) ; },fields override fields,success,sub
ensure fc 2 has <PLACE_HOLDER>,assert . assert true ( is dir ( fc2 @$ path ) ) ; assert . assert true ( exists ( fc2 @$ path ) ) ; assert . assert false ( is file ( fc2 @$ path ) ) ;,fc has directory,success,obj
no <PLACE_HOLDER> between clip area and segment computed corner : bottom left,clippable . init ( ) ; segment clipper . clip ( - __num__ @$ - __num__ @$ __num__ @$ __num__ ) ; assert . assert equals ( __num__ @$ points . size ( ) ) ;,intersection computed corner,success,sub
now <PLACE_HOLDER> has 2000 rows and parttable has 252 rows,save tables with path ( client @$ testnonce + __str__ @$ snapshots path ) ; client . close ( ) ;,reptable has rows,success,sub
given : thread <PLACE_HOLDER> awaited segment .,segment aware aware = new segment aware ( __num__ @$ false ) ; aware . check can read archive or reserve work segment ( __num__ ) ; try { aware . release work segment ( __num__ ) ; } catch ( assertion error e ) { return ; } fail ( __str__ ) ;,which awaited segment,success,sub
param <PLACE_HOLDER> will not include 'this ',std type list param types = desc . get parameter types ( ) ; int sz param types = param types . size ( ) ;,"types include ""this""",success,sub
completing the task will end the process <PLACE_HOLDER>,task service . complete ( task . get id ( ) ) ; assert process ended ( proc id ) ;,task end instance,success,obj
trailers always end the <PLACE_HOLDER> even if not explicitly set .,end of stream = true ; log builder . request trailers ( trailers ) ; log builder . increase request length ( ( http data ) o ) ;,trailers end stream,success,obj
completing the <PLACE_HOLDER> will end the process instance,task service . complete ( task . get id ( ) ) ; assert process ended ( proc id ) ;,task end instance,success,sub
any <PLACE_HOLDER> to open gets a new bogus channel,mockito . when ( mock gcs util . open ( mockito . any ( gcs path . class ) ) ) . then ( invocation -> file channel . open ( files . create temp file ( __str__ @$ __str__ ) @$ standard open option . create @$ standard open option . delete_on_close ) ) ;,request gets channel,success,sub
classify <PLACE_HOLDER> has entity a as an allowed type,assert true ( classify type1 . can apply to entity type ( entity typea ) ) ;,1 has entity,success,sub
test pascal 255 select the fourth <PLACE_HOLDER>,select rows ( table @$ addr ( __num__ ) ) ; selected row = table . get selected row ( ) ; perform action ( make string action @$ model ) ;,255 select row,success,obj
null should not impact <PLACE_HOLDER>,current max = integer max kudaf . aggregate ( null @$ current max ) ; assert that ( __num__ @$ equal to ( current max ) ) ;,null impact result,success,obj
sets payload to empty as <PLACE_HOLDER> contains no data,frame builder . payload ( new byte [ ] { } ) ; curr bytes . reset ( ) ; curr state = beats state . complete ; window size = frame builder . data size ; break ;,frame contains data,success,sub
while <PLACE_HOLDER> always has a complexity of at least 1,bool comp while ++ ; entry stack . peek ( ) . bump decision points ( bool comp while ) ; super . visit ( node @$ data ) ; logger . exiting ( class_name @$ __str__ ) ; return data ;,statement has complexity,success,sub
the bucket move will send a destroy region <PLACE_HOLDER> .,return new distribution message observer ( ) { private volatile boolean done ; @ override public void before send message ( cluster distribution manager dm @$ distribution message message ) { if ( message instanceof destroy region message && ! done ) { task . run ( ) ; done = true ; } } } ;,move send message,success,obj
decrement llc simultaneous segment <PLACE_HOLDER> .,_server metrics . add value to global gauge ( server gauge . llc_simultaneous_segment_builds @$ - __num__ ) ;,decrement llc builds,success,obj
... but the three requests that follow requests include an authorization <PLACE_HOLDER>,for ( int i = __num__ ; i < __num__ ; i ++ ) { request = server . take request ( ) ; assert equals ( __str__ @$ request . get request line ( ) ) ; assert contains ( request . get headers ( ) @$ __str__ + simple authenticator . base_64_credentials ) ; },requests include header,success,obj
<PLACE_HOLDER> expected initial result .,int [ ] results cnt = new int [ ] { __num__ @$ __num__ @$ __num__ } ;,clients expected result,success,sub
check row uses <PLACE_HOLDER> to check we are writing in order .,if ( ! check row ( cell ) ) { if ( start offset < __num__ ) { start offset = out . size ( ) ; } rows offsetbaos . write int ( out . size ( ) - start offset ) ; } last cell = cell ; return encoder . write ( cell ) ;,row uses comparator,success,obj
any request to open gets a new bogus <PLACE_HOLDER>,mockito . when ( mock gcs util . open ( mockito . any ( gcs path . class ) ) ) . then ( invocation -> file channel . open ( files . create temp file ( __str__ @$ __str__ ) @$ standard open option . create @$ standard open option . delete_on_close ) ) ;,request gets channel,success,obj
now test <PLACE_HOLDER> should contain only old junit <PLACE_HOLDER> .,test classes . remove all ( new junit classes ) ; throw new j unit exception ( format ( __str__ + __str__ + __str__ @$ test clazz . get name ( ) @$ sorted classes ( new junit classes ) @$ sorted classes ( test classes ) ) ) ;,classes contain classes,success,obj
contract created by create 2 @$ does n't have <PLACE_HOLDER>,assert . assert equals ( __num__ @$ smart contract . get abi ( ) . get entrys count ( ) ) ;,contract have abi,success,obj
let <PLACE_HOLDER> run its course .,callback . assert no callback ( ) ; final int linger timeout ms = m service . m linger delay ms + m service . m linger delay ms / __num__ ; callback . expect callback ( callback entry . lost @$ m cell network agent @$ linger timeout ms ) ;,linger run course,success,sub
no key <PLACE_HOLDER> specified @$ return no matches,if ( sought keyid == null ) { return mono . just ( collections . empty list ( ) ) ; },id return matches,success,sub
make sure we can tell that the buckets have low <PLACE_HOLDER>,vm0 . invoke ( ( ) -> validate redundancy ( __str__ @$ __num__ @$ __num__ @$ __num__ ) ) ;,buckets have redundancy,success,obj
fall back to default value suppose column <PLACE_HOLDER> contains table name,if ( column label . contains ( __str__ ) ) { table name = string utils . substring before last ( column label @$ __str__ ) ; },label contains name,success,sub
to start @$ offer a box <PLACE_HOLDER> contains all of the colors,pq . offer ( new vbox ( __num__ @$ m colors . length - __num__ ) ) ;,which contains all,success,sub
contract created by create 2 @$ does n't have <PLACE_HOLDER>,assert . assert equals ( __num__ @$ smart contract . get abi ( ) . get entrys count ( ) ) ;,contract have abi,success,obj
a <PLACE_HOLDER> db extension to avoid using exceptions for flow control .,if ( ! is option ) { if ( ! prefer to throw ) { return unexpected token ( ) ; } throw unexpected token ( ) ; },volt db extension,success,sub
test missing proxy <PLACE_HOLDER> <PLACE_HOLDER> not found exception,oin = new proxy blind input stream ( new byte array input stream ( bout . to byte array ( ) ) ) ; try { oin . read object ( ) ; throw new error ( ) ; } catch ( class not found exception ex ) { },class found exception,success,sub
check if session handler sends a goaway <PLACE_HOLDER> when closing,session handler . write inbound ( close message ) ; assert go away ( session handler . read outbound ( ) @$ local stream id ) ; assert null ( session handler . read outbound ( ) ) ; local stream id += __num__ ;,handler sends frame,success,obj
health <PLACE_HOLDER> satisfies probe config health conditions,probe result consumer . accept ( new probe result ( probe factory . get workspace id ( ) @$ probe factory . get machine name ( ) @$ probe factory . get server name ( ) @$ probe status . passed ) ) ;,check satisfies probe,success,sub
mark known <PLACE_HOLDER> makes string 1 longer,int sb len = ( knownlc words != null ) ? len + __num__ : len ;,lc makes string,success,sub
another <PLACE_HOLDER> has moved the sequence failed to increment,so element ( buffer @$ calc element offset ( p index @$ mask ) @$ e ) ; so sequence ( s buffer @$ seq offset @$ p index + __num__ ) ; return true ;,producer moved sequence,success,sub
driver join <PLACE_HOLDER> auxiliary join <PLACE_HOLDER>,double inner join row count = left_rows_count * right_rows_count / left_join_column_ndv * left_join_column_non_nulls * right_join_column_non_nulls * unknown_filter_coefficient ;,auxiliary join clause,success,obj
owner can add internal system <PLACE_HOLDER>,return create window ( parent @$ type @$ token @$ name @$ owner id @$ false ) ;,owner add window,success,obj
completing all the tasks ends the case <PLACE_HOLDER>,for ( task t : cmmn task service . create task query ( ) . case instance id ( case instance . get id ( ) ) . list ( ) ) { cmmn task service . complete ( t . get id ( ) ) ; } assert case instance ended ( case instance ) ;,tasks ends instance,success,obj
m total length contains the <PLACE_HOLDER> already,child top = m padding top + bottom - top - m total length ; break ;,length contains padding,success,obj
<PLACE_HOLDER> should have noticed the error,assert that ( __str__ @$ client socket . error latch . await ( __num__ @$ seconds ) @$ is ( true ) ) ; assert that ( __str__ @$ client socket . error . get ( ) @$ instance of ( message too large exception . class ) ) ;,client noticed error,success,sub
check if ping command does not encounter any <PLACE_HOLDER>,if ( process . exit value ( ) == __num__ ) { shell_result = parse ( process ) ; } else { shell_result = su_busyboox_ping ( params [ __num__ ] . address ) ; },command encounter errors,success,obj
<PLACE_HOLDER> has specified initial context factory ; try to get it,if ( my props != null && my props . get ( context . initial_context_factory ) != null ) { get default init ctx ( ) ; },user specified factory,success,sub
for now the call <PLACE_HOLDER> will return type unknown,type = compiler . resolve type ref ( model @$ bkm @$ bkm @$ null ) ;,bellow return unknown,success,sub
<PLACE_HOLDER> causes all models to observe data,for ( vector . element e : weights . non zeroes ( ) ) { int index = e . index ( ) ; classifier . train ( index @$ vector @$ weights . get ( index ) ) ; },training causes models,success,sub
<PLACE_HOLDER> 4 is try block map pointer or displacement .,return eh data type utilities . get component address ( get data type ( ) @$ try_block_map_ordinal @$ get mem buffer ( ) ) ;,component try pointer,success,sub
skip non union r dot <PLACE_HOLDER>,execution context execution context = test execution context . new instance ( ) ; assert equals ( __num__ @$ merge step . execute ( execution context ) . get exit code ( ) ) ;,r dot java,success,obj
authorization <PLACE_HOLDER> must have a payload,if ( auth header base64 string == null || auth header base64 string . is empty ( ) ) { throw new http authentication exception ( __str__ + __str__ ) ; } return auth header base64 string ;,header have payload,success,sub
the expiration thread is just finishing.. so <PLACE_HOLDER> do anything..,log . debug ( __str__ @$ e ) ; thread . current thread ( ) . interrupt ( ) ; throw new runtime exception ( __str__ @$ e ) ;,dont do anything..,success,sub
<PLACE_HOLDER> already specified schema values,if ( vendor extensions . contains key ( codegen_vendor_extension_key ) ) { logger . info ( __str__ + base name + __str__ ) ; return ; },user specified values,success,sub
find installed font <PLACE_HOLDER> always returns an available font <PLACE_HOLDER>,return font tag . find installed font name ( get font name ( ) ) ;,name returns name,success,obj
authorization header must have a <PLACE_HOLDER>,if ( auth header base64 string == null || auth header base64 string . is empty ( ) ) { throw new http authentication exception ( __str__ + __str__ ) ; } return auth header base64 string ;,header have payload,success,obj
activities containing this fragment must implement its <PLACE_HOLDER> .,if ( ! ( activity instanceof callbacks ) ) { throw new illegal state exception ( __str__ ) ; } m callbacks = ( callbacks ) activity ;,activities implement callbacks,success,obj
for now @$ simply assert since this class has a hardcoded <PLACE_HOLDER>,if ( ! get name ( ) . equals ( name ) ) { throw new runtime exception ( __str__ + get name ( ) + __str__ + name + __str__ ) ; },class has name,success,obj
initialize the default edit <PLACE_HOLDER> .,get view ( ) . add view mode ( m_edit mode ) ; m_edit mode listener = new internal edit mode listener < node type @$ edge type > ( m_graph listeners ) ; m_edit mode . add listener ( m_edit mode listener ) ;,default edit mode,success,obj
<PLACE_HOLDER> should have one active activity,list < string > active activity ids = runtime service . get active activity ids ( execution . get id ( ) ) ; assert equals ( __num__ @$ active activity ids . size ( ) ) ;,and have activity,success,sub
does unaltered <PLACE_HOLDER> still match ref <PLACE_HOLDER> ?,bos . reset ( ) ; bs ref . serialize ( b ref @$ bos ) ; ser deser ( bs @$ b1 @$ bos . to byte array ( ) @$ null @$ null ) ;,block match block,success,sub
<PLACE_HOLDER> is using cell | wi fi .,m service . set underlying networks for vpn ( new network [ ] { m cell network agent . get network ( ) @$ m wi fi network agent . get network ( ) } ) ; wait for idle ( ) ;,vpn using fi,success,sub
check can not delete <PLACE_HOLDER> via rest because it contains tables .,response = client . delete ( namespace path ) ; namespace path = __str__ + ns name ; assert equals ( __num__ @$ response . get code ( ) ) ;,check delete namespace,success,obj
<PLACE_HOLDER> these elements using insertion <PLACE_HOLDER>,a [ e1 ] = t ; a [ e2 ] = a [ e1 ] ;,elements using sort,success,obj
remove any provided <PLACE_HOLDER> that do not exist in this segment .,for ( string column name : immutable list . copy of ( column names ) ) { if ( index . get column holder ( column name ) == null ) { column names . remove ( column name ) ; } },any provided columns,success,obj
onload will set appropriate <PLACE_HOLDER> later,if ( icon instanceof image icon ) { icon . set width ( __str__ ) ; icon . set height ( __str__ ) ; },onload set size,success,obj
everyone can submit <PLACE_HOLDER> on queue c .,verify submit reservation success ( queue_b_user @$ queuec ) ; verify submit reservation success ( queue_b_admin @$ queuec ) ; verify submit reservation success ( queue_a_user @$ queuec ) ; verify submit reservation success ( queue_a_admin @$ queuec ) ; verify submit reservation success ( common_user @$ queuec ) ;,everyone submit reservations,success,obj
each transform also gets its own <PLACE_HOLDER>,list < string > expected groups = arrays . as list ( connector config . common_group @$ connector config . transforms_group @$ connector config . error_group @$ __str__ @$ __str__ ) ; assert equals ( expected groups @$ result . groups ( ) ) ; assert equals ( __num__ @$ result . error count ( ) ) ;,transform gets group,success,obj
let 's not store 'raw ' <PLACE_HOLDER> but nodes,if ( value == null ) { value = null node ( ) ; },s store nulls,success,obj
represents separator @$ <PLACE_HOLDER> has no temporal field,verify pattern parsing ( __str__ @$ new array list < > ( list . of ( null @$ chrono field . year @$ null @$ chrono field . month_of_year @$ null @$ chrono field . day_of_month @$ null ) ) ) ;,which has field,success,sub
add num <PLACE_HOLDER> values <PLACE_HOLDER> values .,if ( i <= num null values ) { pf . pkid = null ; pf . status = __str__ + i ; } r1 . put ( i + __str__ @$ pf ) ;,null values values,success,sub
locked <PLACE_HOLDER> may generate notifications we can send unlocked,if ( ! is held by current thread ( ) ) { map . process pending notifications ( ) ; },cleanup generate notifications,success,sub
mock <PLACE_HOLDER> to allow dynamically generated certificates to be accepted,httpsurl connection . set defaultssl socket factory ( new key store factory ( new mock server logger ( ) ) . ssl context ( ) . get socket factory ( ) ) ; mock server = client and server . start client and server ( port factory . find free port ( ) ) ;,server generated certificates,success,sub
successful connect request <PLACE_HOLDER> in a response with empty body .,if ( status code == __num__ ) { if ( http method . connect . equals ( method ) ) { done = true ; queue . clear ( ) ; return true ; } },successful connect results,success,obj
null <PLACE_HOLDER> has no data,if ( constraint data != null ) { number flag = ( number ) constraint data . get field value ( __str__ ) ; if ( flag != null ) { this . flag = flag . int value ( ) ; } },constraint has data,success,sub
additionally @$ this condition reduces computation <PLACE_HOLDER>,if ( ! m answer sounds added ) { string answer sound source = remove front side audio ( answer ) ; m sound player . add sounds ( m base url @$ answer sound source @$ sound . sounds_answer ) ; m answer sounds added = true ; },condition reduces time,success,obj
modal bottom sheets have auto peek <PLACE_HOLDER> by default .,assert that ( behavior . get peek height ( ) @$ is ( bottom sheet behavior . peek_height_auto ) ) ;,sheets have height,success,obj
set hll log 2 <PLACE_HOLDER> .,_hll log2m = segment metadata properties configuration . get int ( segment_hll_log2m @$ hll constants . default_log2m ) ;,hll log m,success,obj
let <PLACE_HOLDER> do its job first,super . setup view interceptors ( view ) ; add view serialization interceptor ( view ) ;,super do job,success,sub
release app 2 's am <PLACE_HOLDER> on node 2 .,scheduler . handle ( app removed event2 ) ; assert equals ( __str__ @$ __num__ @$ queue1 . get am resource usage ( ) . get memory size ( ) ) ; scheduler . update ( ) ;,release app container,success,obj
<PLACE_HOLDER> should throw null pointer exception .,select results sr = ( select results ) q . execute ( ) ; assert true ( __str__ @$ ( ( range index test hook ) hook ) . is hooked ( __num__ ) ) ; range index . set test hook ( null ) ;,following throw exception,success,sub
<PLACE_HOLDER> can see these projects,index for user ( user1 @$ new doc ( ) . set languages ( singleton list ( __str__ ) ) @$ new doc ( ) . set languages ( as list ( __str__ @$ __str__ ) ) ) ;,user see projects,success,sub
process named query i <PLACE_HOLDER>,list < string > named query ids = list named queries result . get named query ids ( ) ;,process named ds,success,obj
concurrent hash <PLACE_HOLDER> does not need synch . here,for ( abstract thread group thread group : groups ) { thread group . wait threads stopped ( ) ; },map need synch,success,sub
check that participant status listener is working <PLACE_HOLDER>,assert equals ( __str__ @$ room + __str__ @$ answer [ __num__ ] ) ; assert equals ( __str__ @$ room + __str__ @$ answer [ __num__ ] ) ;,listener working ok,success,obj
clear to let <PLACE_HOLDER> do its work,int new size = size - ( to index - from index ) ; for ( int i = new size ; i < size ; i ++ ) { element data [ i ] = null ; } size = new size ;,gc do work,success,sub
assert that the correct <PLACE_HOLDER> does not contain the violation .,assert true ( compare pairs . stream ( ) . none match ( p -> p . get path ( ) . equals ( cwd ) ) ) ;,dir contain violation,success,sub
disable <PLACE_HOLDER> hostname verifier .,httpsurl connection . set default hostname verifier ( new hostname verifier ( ) { @ override public boolean verify ( string s @$ ssl session ssl ses ) { return true ; } } ) ; super . before test ( ) ;,ssl hostname verifier,success,sub
restarted <PLACE_HOLDER> has the failed app info too .,rm2 . wait for state ( app1 . get application id ( ) @$ rm app state . failed ) ;,rm has info,success,sub
verify that the configuration now has three <PLACE_HOLDER> .,configuration = s3 client . get bucket lifecycle configuration ( bucket name ) ; system . out . println ( __str__ + configuration . get rules ( ) . size ( ) ) ;,configuration has rules,success,obj
given : thread which awaited <PLACE_HOLDER> .,segment aware aware = new segment aware ( __num__ @$ false ) ; aware . check can read archive or reserve work segment ( __num__ ) ; try { aware . release work segment ( __num__ ) ; } catch ( assertion error e ) { return ; } fail ( __str__ ) ;,which awaited segment,success,obj
unlike pql @$ sql expects the group <PLACE_HOLDER> in select statements .,string group by columns = string utils . join ( _group columns @$ __str__ ) ;,sql expects columns,success,obj
higher priority @$ so accept new work <PLACE_HOLDER>,assert . assert true ( add files ( list @$ __str__ @$ __num__ ) ) ; assert . assert equals ( list . get work units ( ) . size ( ) @$ __num__ ) ;,priority accept units,success,obj
collect all metadata @$ newer <PLACE_HOLDER> override older <PLACE_HOLDER>,if ( is newer ( res @$ val ) ) { meta = merge meta ( val . get meta data ( ) @$ meta ) ; res . set ( val ) ; } else { meta = merge meta ( meta @$ val . get meta data ( ) ) ; },values override values,success,sub
test non zero <PLACE_HOLDER> .,iterator < element > it = vector . non zeroes ( ) . iterator ( ) ; int i = __num__ ; while ( it . has next ( ) ) { it . next ( ) ; ++ i ; },non zero iterator,success,obj
resetting max <PLACE_HOLDER> should not remove max<PLACE_HOLDER> attribute,tf . add focus listener ( event -> { tf . set max length ( __num__ ) ; } ) ;,length remove attribute,success,sub
unknown slot <PLACE_HOLDER> basically means the exists predicate,if ( ! ( predicates . length == __num__ && predicates [ __num__ ] instanceof exists predicate ) ) { throw new illegal state exception ( __str__ + arrays . to string ( predicates ) ) ; } return true ;,which means predicate,success,sub
