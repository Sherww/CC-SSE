use local <PLACE_HOLDER> for embedded spark <PLACE_HOLDER> when spark.master is not found,conf . set if missing ( __str__ @$ __str__ ) ; this . inner interpreter = load spark scala interpreter ( conf ) ; this . inner interpreter . open ( ) ; sc = this . inner interpreter . get spark context ( ) ; jsc = java spark context . from spark context ( sc ) ; spark version = spark version . from version string ( sc . version ( ) ) ; if ( enable supported version check && spark version . is unsupported version ( ) ) { throw new exception ( __str__ + spark version + __str__ + __str__ ) ; } sql context = this . inner interpreter . get sql context ( ) ; spark session = this . inner,mode spark context,fail,obj, conf <SEP> sc <SEP> sc <SEP> sc <SEP> ,14,,,code$$ sc: scala  3  ,
if the receiver is not included in the contract @$ unfreeze frozen balance for this <PLACE_HOLDER> . otherwise @$ unfreeze delegated frozen balance provided this <PLACE_HOLDER> .,if ( ! array utils . is empty ( receiver address ) && dynamic store . supportdr ( ) ) { if ( arrays . equals ( receiver address @$ owner address ) ) { throw new contract validate exception ( __str__ ) ; } if ( ! decode util . address valid ( receiver address ) ) { throw new contract validate exception ( __str__ ) ; } account capsule receiver capsule = account store . get ( receiver address ) ; if ( dynamic store . get allow tvm constantinople ( ) == __num__ && receiver capsule == null ) { string readable receiver address = string util . create readable string ( receiver address ) ; throw new contract validate exception ( __str__ + readable,balance provided address,fail,obj, util  <SEP> tvm  <SEP> util,12,,,code$$ util: utils 2 ,
this is tough for hotspot @$ but graal eliminates all <PLACE_HOLDER> .,consume ( el ) ;,graal eliminates calls,fail,obj,el,1,,comm&& el:eliminates 1,,
turn the screen off . a black surface is already hiding the <PLACE_HOLDER> of the screen .,if ( m power state . get color fade level ( ) == __num__ ) { set screen state ( display . state_off ) ; m pending screen off = false ; m power state . dismiss color fade resources ( ) ; } else if ( perform screen off transition && m power state . prepare color fade ( m context @$ m color fade fades config ? color fade . mode_fade : color fade . mode_cool_down ) && m power state . get screen state ( ) != display . state_off ) { m color fade off animator . start ( ) ; } else { m color fade off animator . end ( ) ; },surface hiding area,fail,obj,None,8,,,,
only the main task stack change notification requires a <PLACE_HOLDER> .,m handler . send message delayed ( msg @$ notify_task_stack_change_listeners_delay ) ;,notification requires delivery,fail,obj,None,2,,,,
do abc tag <PLACE_HOLDER> does not have name,continue ;,abc tag plugin,fail,obj,None,0,,,,
our randomly generated <PLACE_HOLDER> significantly .,return name . length ( ) == __num__ ;,our generated name,fail,obj,None,1,,,,
bypass pe <PLACE_HOLDER> @$ but permit p es to complete ... valid docs wo n't care .,try { for ( ; ; ) { int c = getc ( ) ; if ( c == __str__ ) { c = getc ( ) ; if ( c != __str__ ) { if ( save comment text ) str tmp . append ( __str__ ) ; ungetc ( ) ; continue ; } next char ( __str__ @$ __str__ @$ null ) ; break one comment ; } if ( save comment text ) str tmp . append ( ( char ) c ) ; } } catch ( end of input exception e ) { if ( in . is internal ( ) ) { error ( __str__ @$ null ) ; } fatal ( __str__ ) ; },bypass pe tests,fail,obj,tmp ,15,,,,
note that we can not do any size checking here @$ as the correct component count depends on the drawing step . gl should catch such <PLACE_HOLDER> then @$ and we will report them to the user .,if ( m values != null ) { gles20 . gl bind buffer ( gles20 . gl_array_buffer @$ __num__ ) ; gles20 . gl vertex attrib pointer ( m index @$ m components @$ m type @$ m should normalize @$ m stride @$ m values ) ; } else { gles20 . gl bind buffer ( gles20 . gl_array_buffer @$ m vbo ) ; gles20 . gl vertex attrib pointer ( m index @$ m components @$ m type @$ m should normalize @$ m stride @$ m offset ) ; },note catch exceptions,fail,obj,gl <SEP> gl <SEP> attrib <SEP> gl <SEP> gl ,20,,code$$  gl gles 5,,
copy local variables to event scope execution by value . this way @$ the event scope execution references a <PLACE_HOLDER> ' of the local variables,new sub process variable snapshotter ( ) . set variables snapshots ( sub process execution @$ event scope execution ) ;,execution references ' snapshot,fail,obj,None,5,,,,
copy is necessary since the instance info builder just uses the original <PLACE_HOLDER> @$ and we do n't want to corrupt the global eureka copy of the object which may be used by other clients in our system,instance info copy = new instance info ( ii ) ; if ( is secure ) { ii = new instance info . builder ( copy ) . set secure port ( override port ) . build ( ) ; } else { ii = new instance info . builder ( copy ) . set port ( override port ) . build ( ) ; },builder uses one,fail,obj,ii <SEP> ii <SEP> ii,3,,code$$  ii instance info 3,,
this test verifies the baseline <PLACE_HOLDER> used in subsequent tests . if this fails @$ the rest will fail .,project dependency graph graph = three projects depending ona single ( ) ; final list < maven project > sorted projects = graph . get sorted projects ( ) ; assert equals ( a project @$ sorted projects . get ( __num__ ) ) ; assert equals ( depender1 @$ sorted projects . get ( __num__ ) ) ; assert equals ( depender2 @$ sorted projects . get ( __num__ ) ) ; assert equals ( depender3 @$ sorted projects . get ( __num__ ) ) ;,test verifies values,fail,obj,None,20,,,,
check:3 compare the key <PLACE_HOLDER>,for ( int i = __num__ ; i < prev count ; i ++ ) { value meta interface pre value = null ; for ( int j = __num__ ; j < rows . length ; j ++ ) { value meta interface v = rows [ j ] . search value meta ( key list . get ( j ) [ i ] ) ; if ( v == null ) { return false ; } if ( j != __num__ && v . get type ( ) != pre value . get type ( ) ) { log error ( __str__ ) ; return false ; } else { pre value = v ; } } },check:3 compare list,fail,obj, prev ,9,,,,
backslash and double quote need double the <PLACE_HOLDER> for both java and haskell,special char replacements . remove ( __str__ ) ; special char replacements . remove ( __str__ ) ; special char replacements . put ( __str__ @$ __str__ ) ; special char replacements . put ( __str__ @$ __str__ ) ;,backslash double handling,fail,obj,None,10,,,,
record the sequence of seeks and reads which trigger a <PLACE_HOLDER> .,int [ ] seeks = new int [ __num__ ] ; int [ ] reads = new int [ __num__ ] ; try ( fs data input stream stm = get file system ( ) . open ( random seek file ) ) { for ( int i = __num__ ; i < limit ; i ++ ) { int seek off = r . next int ( buf . length ) ; int to read = r . next int ( math . min ( buf . length - seek off @$ __num__ ) ) ; seeks [ i % seeks . length ] = seek off ; reads [ i % reads . length ] = to read ; verify read ( stm @$ buf @$,which trigger split,fail,obj, fs <SEP> stm <SEP>  stm ,25,,code$$ stm  stream 2,code$$ fs file system 1,
get new display metrics based on the display adjustments given to the resources impl . update a <PLACE_HOLDER> if the compatibility info changed @$ because the resources impl object will handle the update internally .,display adjustments daj = r . get display adjustments ( ) ; if ( compat != null ) { daj = new display adjustments ( daj ) ; daj . set compatibility info ( compat ) ; } dm = get display metrics ( display id @$ daj ) ; if ( ! is default display ) { apply non default display metrics to configuration ( dm @$ tmp config ) ; } if ( has override configuration ) { tmp config . update from ( key . m override configuration ) ; } r . update configuration ( tmp config @$ dm @$ compat ) ; r . update configuration ( config @$ dm @$ compat ) ;,metrics update configuration,fail,obj,daj <SEP> daj <SEP> daj <SEP> daj <SEP> daj <SEP> config<SEP> config  <SEP> config <SEP> config ,21,,code$$ comm&&  conf: configuration 4,code$$  daj display adjustments 5,
create calendar which omits <PLACE_HOLDER>,for ( action . handler action handler : action handlers ) { gregorian calendar cal = new gregorian calendar ( get time zone ( ) @$ get locale ( ) ) ; cal . clear ( ) ; cal . set ( current calendar . get ( java . util . calendar . year ) @$ current calendar . get ( java . util . calendar . month ) @$ current calendar . get ( java . util . calendar . date ) ) ; date start = cal . get time ( ) ; cal . add ( java . util . calendar . date @$ __num__ ) ; cal . add ( java . util . calendar . second @$ - __num__ ) ; date end,which omits keys,fail,obj,None,11,,,,
method reports <PLACE_HOLDER> in nanoseconds across all processors .,cpu time /= __num__ * os . get available processors ( ) ; double cpu = __num__ ; if ( prev cpu time > __num__ ) { long cpu time diff = cpu time - prev cpu time ; cpu = math . min ( __num__ @$ ( double ) cpu time diff / metrics_update_freq ) ; },method reports cpu,fail,obj,prev <SEP> diff <SEP> freq,10,,,,
first copy the children as the call to copy.add will modify the <PLACE_HOLDER> we 're iterating on,enumeration < ? > enum from = node . children ( ) ; list < j meter tree node > tmp = new array list < > ( ) ; while ( enum from . has more elements ( ) ) { j meter tree node child = ( j meter tree node ) enum from . next element ( ) ; tmp . add ( child ) ; } for ( j meter tree node j meter tree node : tmp ) { copy . add ( j meter tree node ) ; } tree model . insert node into ( copy @$ target @$ index ++ ) ; nodes for removal . add ( node ) ; paths to select [ path position ++ ] =,call modify order,fail,obj,enum <SEP> tmp <SEP> enum <SEP> enum,10,,code$$  enum enumeration 3,,
rather than fight it @$ let root have an <PLACE_HOLDER>,nodes . put ( __str__ @$ root ) ; nodes . put ( root zookeeper @$ root ) ; root . add child ( proc child zookeeper ) ; nodes . put ( proc zookeeper @$ proc data node ) ; proc data node . add child ( quota child zookeeper ) ; nodes . put ( quota zookeeper @$ quota data node ) ;,root have effect,fail,obj,proc ,9,,,,
not sure which thread gets the <PLACE_HOLDER> first so we add them to a map and verify that some thread had 4 threads waiting @$ 3 threads @$ etc .,assert that ( map . size ( ) @$ equal to ( __num__ ) ) ; assert that ( map @$ has key ( __num__ ) ) ; assert that ( map @$ has key ( __num__ ) ) ; assert that ( map @$ has key ( __num__ ) ) ; assert that ( map @$ has key ( __num__ ) ) ; assert that ( map @$ has key ( __num__ ) ) ;,thread gets keys,fail,obj,None,6,,,,
not seen yet ; must add an entry @$ return it . for that @$ we need <PLACE_HOLDER>,object id generator < ? > generator = null ; if ( _object id generators == null ) { _object id generators = new array list < object id generator < ? > > ( __num__ ) ; } else { for ( int i = __num__ @$ len = _object id generators . size ( ) ; i < len ; ++ i ) { object id generator < ? > gen = _object id generators . get ( i ) ; if ( gen . can use for ( generator type ) ) { generator = gen ; break ; } } } if ( generator == null ) { generator = generator type . new for serialization ( this ) ; _object id generators .,not need none,fail,obj,None,9,,,,
if the final number of <PLACE_HOLDER>s to scroll ends up being 0 @$ the view should still scroll at least one <PLACE_HOLDER> .,return capped scroll step != __num__ ? capped scroll step : direction ;,view scroll step,fail,obj,None,3,,,,
components commonly have conditional <PLACE_HOLDER>s assigned . using the click <PLACE_HOLDER> matcher we can assert whether or not a given component has a <PLACE_HOLDER> attached to them . noinspection unchecked,assert that ( c @$ component ) . extracting sub component at ( __num__ ) . has ( sub component with ( c @$ test footer component . matcher ( c ) . click handler ( is null . < event handler < click event > > null value ( null ) ) . build ( ) ) ) ;,component has event,fail,obj,None,3,,,,
report all volumes as unmounted until we 've recorded that user 0 has <PLACE_HOLDER> . there are no guarantees that callers will see a consistent view of the volume before that point,final boolean system user unlocked = is system unlocked ( user handle . user_system ) ; final boolean user key unlocked ; final boolean storage permission ; final long token = binder . clear calling identity ( ) ; try { user key unlocked = is user key unlocked ( user id ) ; storage permission = m storage manager internal . has external storage ( uid @$ package name ) ; } finally { binder . restore calling identity ( token ) ; } boolean found primary = false ; final array list < storage volume > res = new array list < > ( ) ; synchronized ( m lock ) { for ( int i = __num__ ; i < m volumes . size (,user has access,fail,obj, uid <SEP> res ,7,,code$$ uid user id 1,,
relative paths have no <PLACE_HOLDER> .,return new gcs path ( fs @$ __str__ @$ component ) ;,paths have symbols,fail,obj,gcs <SEP> fs ,3,,,,
the response object does n't contain any relevant <PLACE_HOLDER> so we have to create a copy of values being sent over the network in case m jp settings is modified while awaiting response,final jetpack settings model sent jp data = new jetpack settings model ( m jp settings ) ; ++ m save request count ; word press . get rest client utilsv1_1 ( ) . set jetpack settings ( m site . get site id ( ) @$ params @$ new rest request . listener ( ) { @ override public void on response ( json object response ) { app log . d ( app log . t . api @$ __str__ ) ; m remote jp settings . monitor active = sent jp data . monitor active ; m remote jp settings . jetpack protect enabled = sent jp data . jetpack protect enabled ; m remote jp settings . jetpack protect whitelist . clear ( ),object contain information,fail,obj,params ,12,,,,
return null since neither dm nor dls are shutting down can not call <PLACE_HOLDER> in progress because it 's abstract,return null ;,null call anything,fail,obj,None,0,,,,
will be null when the feature to use minimized <PLACE_HOLDER> is disabled .,if ( minimized bitcode == null ) { return full bitcode ; } return minimized bitcode ;,feature use bitmap,fail,obj,None,5,,,,
some systems send update <PLACE_HOLDER> before call is established to update call screening @$ if we do not process them and just send 501 we end the dialog and the call will fail to establish @$ so we just send ok,return false ;,systems send codecs,fail,obj,None,0,,,,
no averagers returned <PLACE_HOLDER> . all buckets must be empty . skip this row .,return null ;,averagers returned nulls,fail,obj,None,0,,,,
check that pause resume wo n't call the end <PLACE_HOLDER> prematurely,resp . pause ( ) ; resp . resume ( ) ;,resume call method,fail,obj,resp <SEP> resp,2,,,,
hint arrow has no <PLACE_HOLDER> @$ and always returns the current <PLACE_HOLDER>,if ( is in agility arena ( ) ) { world point new ticket position = client . get hint arrow point ( ) ; world point old tick position = last arena ticket position ; last arena ticket position = new ticket position ; if ( old tick position != null && new ticket position != null && ( old tick position . getx ( ) != new ticket position . getx ( ) || old tick position . gety ( ) != new ticket position . gety ( ) ) ) { log . debug ( __str__ @$ old tick position @$ new ticket position ) ; if ( config . notify agility arena ( ) ) { notifier . notify ( __str__ ) ; },arrow has position,fail,obj, config,10,,,,
report if multiple devices are matching the <PLACE_HOLDER> .,if ( ! quiet && devices . size ( ) > __num__ ) { print message ( __str__ + devices . size ( ) + __str__ ) ; },devices matching pattern,fail,obj,None,5,,,,
delete interpret odex for android o @$ directory change . fortunately @$ we do n't need to support android o interpret <PLACE_HOLDER> any more,log . i ( tag @$ __str__ ) ; share patch file util . delete dir ( patch version directory + __str__ + share constants . interpret_dex_optimize_path ) ;,o interpret sudo,fail,obj, util <SEP> dir ,6,,comm&& dir directory  1, ,
if an instance of media tray @$ fall thru returning all media printable <PLACE_HOLDER>,if ( ! ( media name instanceof media size name ) ) { media name = null ; },instance printable attributes,fail,obj,None,1,,,,
let the emulator view handle <PLACE_HOLDER> if mouse tracking is active,if ( view . is mouse tracking active ( ) ) return false ;,view handle things,fail,obj,None,1,,,,
a serializable function can only return an object type @$ so if the do <PLACE_HOLDER> parameter is a primitive type @$ then box it for the return . the return type will be unboxed before being forwarded to the do <PLACE_HOLDER> parameter .,if ( output type . get raw type ( ) . is primitive ( ) ) { output type = type descriptor . of ( primitives . wrap ( output type . get raw type ( ) ) ) ; },the do output,fail,obj,None,1,,,,
in case when remote tx has updated the current <PLACE_HOLDER> before .,ignore ( ) ;,tx updated transaction,fail,obj,None,0,,,,
camera device should call configure <PLACE_HOLDER> and have it finish before constructing us,if ( configure success ) { m state callback . on configured ( this ) ; if ( debug ) log . v ( tag @$ m id string + __str__ ) ; m configure success = true ; } else { m state callback . on configure failed ( this ) ; m closed = true ; log . e ( tag @$ m id string + __str__ ) ; m configure success = false ; },device call success,fail,obj,None,3,,,,
junit do n't provide any <PLACE_HOLDER> to order tests,pre auth ( ) ; missing auth ( ) ; valid auth ( ) ; valid auth2 ( ) ;,junit provide credentials,fail,obj,auth <SEP> auth2,4,,,,
t<PLACE_HOLDER>t that submit do<PLACE_HOLDER> n't throw np <PLACE_HOLDER>,executor service . submit ( new test event handler ( mocked server @$ event type . m_server_shutdown @$ lock @$ counter ) ) ;,submit throw c,fail,obj,None,2,,,,
this must be done to assure the correct vfs file system drivers will process the <PLACE_HOLDER>,string scheme = extract scheme ( full parameter name ) ; try { delegating file system options builder delegatefs options builder = new delegating file system options builder ( kettlevfs . get instance ( ) . get file system manager ( ) ) ; if ( scheme != null ) { delegatefs options builder . set config string ( opts @$ scheme @$ name @$ value ) ; } else { log . log minimal ( __str__ + vfs url ) ; } } catch ( file system exception e ) { if ( ( e . get code ( ) != null ) && ( e . get code ( ) . equals ignore case ( __str__ ) ) ) { log . log minimal ( __str__,drivers process html,fail,obj,fs <SEP> fs <SEP> config <SEP> opts ,16,,code$$ comm&& fs file system  2,code$$ opts options  1,
returns object <PLACE_HOLDER> from document loader .,return get document loader ( parent identifier ) . query child documents ( projection @$ parent identifier ) ;,returns object reference,fail,obj,None,2,,,,
the monitor we are exiting is not verifiably the one on the top of our monitor stack . this causes a monitor <PLACE_HOLDER> .,if ( ! actual . is lock reference ( ) || ! expected . equal ( actual ) ) { _monitor_top = bad_monitors ; _monitor_safe = false ; basic block bb = get basic block containing ( bci ) ; bb . set changed ( true ) ; bb . _monitor_top = bad_monitors ; if ( trace monitor mismatch ) { report monitor mismatch ( __str__ ) ; } } else { replace allcts matches ( actual @$ cell type state . make line ref ( bci ) ) ; },monitor causes failure,fail,obj, bb <SEP> bci <SEP> bb <SEP> bb<SEP> bci,14,,code$$ bb basic block 3,code$$ bci basic block containing  2,
end probe phase @$ iterator build side <PLACE_HOLDER> .,collector . collect ( build iter . get row ( ) ) ; while ( build iter . advance next ( ) ) { collector . collect ( build iter . get row ( ) ) ; },iterator build effects,fail,obj,iter <SEP> iter <SEP> iter,5,,comm&& iter iterator  3  zhu,,
source and destination images may have different <PLACE_HOLDER> requirements @$ therefore may have different strides . copy row by row for such case .,int src offset = src buffer . position ( ) ; int dst offset = dst buffer . position ( ) ; size effective plane size = get effective plane size for image ( src @$ i ) ; int src byte count = effective plane size . get width ( ) * src planes [ i ] . get pixel stride ( ) ; for ( int row = __num__ ; row < effective plane size . get height ( ) ; row ++ ) { if ( row == effective plane size . get height ( ) - __num__ ) { int remaining bytes = src buffer . remaining ( ) - src offset ; if ( src byte count > remaining bytes ) { src,images have strides,fail,obj,src <SEP> src <SEP>src <SEP>  src <SEP> src <SEP> src <SEP> src <SEP> src <SEP> src,23,,comm&& src source 9,,
this node has been inactive @$ but other node has more recent <PLACE_HOLDER> .,if ( ! is inactive ) { updated latest success transfer = latest reported cluster activity ; },node has information,fail,obj,None,2,,,,
flush those recovered buffered <PLACE_HOLDER> out .,produce synchronously to partition zero ( input @$ as list ( new key value timestamp < > ( __str__ @$ __str__ @$ scaled time ( __num__ ) ) @$ new key value timestamp < > ( __str__ @$ __str__ @$ scaled time ( __num__ ) ) @$ new key value timestamp < > ( __str__ @$ __str__ @$ scaled time ( __num__ ) ) ) ) ; verify output ( output raw @$ new hash set < > ( as list ( new key value timestamp < > ( __str__ @$ __num__ @$ scaled time ( __num__ ) ) @$ new key value timestamp < > ( __str__ @$ __num__ @$ scaled time ( __num__ ) ) @$ new key value timestamp < > ( __str__ @$ __num__,those recovered records,fail,obj,None,23,,,,
serialize and deserialize unconfigured build <PLACE_HOLDER> as string,simple module build target module = new simple module ( __str__ ) ; build target module . add serializer ( unconfigured build target . class @$ new to string serializer ( ) ) ; build target module . add deserializer ( unconfigured build target . class @$ new from string deserializer < unconfigured build target > ( unconfigured build target . class ) { @ override protected unconfigured build target _deserialize ( string value @$ deserialization context ctxt ) { return unconfigured build target parser . parse ( value @$ intern ) ; } } ) ; mapper . register module ( build target module ) ; mapper . register module ( forward relative path module ( ) ) ; return mapper ;,unconfigured build targets,fail,obj, ctxt,19,,code$$ ctxt  context 1,,
note : the subclass will release the 'work finished latch ' early @$ before work is actually finished . this means that the test may proceed and perform <PLACE_HOLDER> earlier than anticipated .,work start latch . count down ( ) ; try { work finished latch . await ( __num__ @$ time unit . seconds ) ; } catch ( interrupted exception e ) { assert . fail ( __str__ ) ; } work finished latch = new count down latch ( __num__ ) ;,test proceed work,fail,obj,None,5,,,,
one last sync whose transactions are not expected to be seen in the input streams because the journal nodes have not updated their <PLACE_HOLDER> of the committed transaction id yet,write txns ( stm @$ __num__ @$ __num__ ) ; future throws ( new io exception ( ) ) . when ( spies . get ( __num__ ) ) . get journaled edits ( __num__ @$ quorum journal manager . qjm_rpc_max_txns_default ) ; future throws ( new io exception ( ) ) . when ( spies . get ( __num__ ) ) . get journaled edits ( __num__ @$ quorum journal manager . qjm_rpc_max_txns_default ) ; list < edit log input stream > streams = new array list < > ( ) ; qjm . select input streams ( streams @$ __num__ @$ true @$ true ) ;,nodes updated stats,fail,obj,txns<SEP> txns <SEP> txns<SEP> qjm <SEP> qjm  <SEP> qjm ,23,,comm&& txns transavtion  3,code$$ qjm  quorum journal manager  3,
assumption : the client has already retrieved <PLACE_HOLDER> to the given address,if ( addr . equals ( code unit address ) ) { continue ; },client retrieved access,fail,obj,addr,2,,comm&& addr address  1,,
as we do n't have a bind we need a unique name . let 's use the <PLACE_HOLDER> as the generated invoker,identifier = generated class name ; context . add declaration ( generated class name @$ object . class ) ;,name use name,fail,obj,None,2,,,,
only master stream can resolve the data <PLACE_HOLDER>,assert ( m_coordinator . is master ( ) ) ;,stream resolve space,fail,obj,None,1,,,,
ooohml provides the <PLACE_HOLDER> for disconnecting and closing cache on out of off heap memory exception,out of off heap memory listener ooohml = new disconnecting out of off heap memory listener ( ( internal distributed system ) system ) ; return basic create off heap storage ( sf @$ off heap memory size @$ ooohml ) ;,ooohml provides method,fail,obj,None,4,,,,
only 1 process can have this process <PLACE_HOLDER>,break ;,process have state,fail,obj,None,0,,,,
use cached buffered <PLACE_HOLDER> for now .,return m player . get buffered position ( ) ;,use cached position,fail,obj,None,1,,,,
no ties top <PLACE_HOLDER>,arrays . fill ( hits @$ __num__ ) ; actual_label = __num__ ; pred_dist = new double [ ] { __num__ @$ __num__ @$ __num__ @$ __num__ @$ __num__ } ; update hits ( __num__ @$ actual_label @$ pred_dist @$ hits ) ; assert . assert true ( arrays . equals ( hits @$ new double [ ] { __num__ @$ __num__ @$ __num__ @$ __num__ } ) ) ;,ties top point,fail,obj,None,23,,,,
create a new item list which contain a new adapter item object the id of the new item is changed @$ and will be treated as a new item according to the rule we set in the callback . this test case is to verify the get change payload <PLACE_HOLDER> still honor the standard we set up to judge new item,m items . clear ( ) ; adapter item new item = new adapter item ( __num__ @$ __str__ @$ __str__ ) ; m items . add ( new item ) ;,the honor parameters,fail,obj,None,5,,,,
before inlining happens remove unused code sees one use of inner c @$ which prevents its <PLACE_HOLDER> . after inlining it sees ` this instanceof inner c ` as the only use of inner c. make sure remove unused code recognizes that the value of inner c escapes .,test ( options @$ lines ( __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ ) @$ lines ( __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ ) ) ;,which prevents removal,success,obj,None,20,,,,test
src inode and its subtree can not contain snapshottable <PLACE_HOLDER> with snapshots,fs dir snapshot op . check snapshot ( fsd @$ srciip @$ snapshottable dirs ) ;,inode contain directories,success,obj, dir<SEP> dirs,6,,code$$ dir:dirs 1,,
this statement can not be reached since the above method always throws an <PLACE_HOLDER> this is only here to silence the compiler and any warnings,return consumer records . empty ( ) ;,method throws exception,success,obj,None,1,,,,
throws obsolete version exception if another process has created a new <PLACE_HOLDER> already,store client . put ( new key . map value ( ) @$ new node ) ;,process created node,success,obj,None,0,,,,
check that slave satisfies min <PLACE_HOLDER> .,if ( cpus < cluster props . min cpu per node ( ) || mem < cluster props . min memory per node ( ) ) { log . log ( level . fine @$ __str__ @$ offer . get resources list ( ) ) ; return null ; } double total cpus = __num__ ; double total mem = __num__ ; double total disk = __num__ ;,slave satisfies requirements,success,obj, mem <SEP> mem ,9,,code$$ men: memory 2,,
for every time when a user has not selected a <PLACE_HOLDER> but a basic block this breaks . as it does throw a null pointer exception .,first function . load ( ) ; second function . load ( ) ; final creation thread creation thread = new creation thread ( module @$ source block @$ target block @$ first function @$ second function ) ; progress dialog . show ( plugin interface . get main window ( ) . get frame ( ) @$ __str__ @$ creation thread ) ; if ( ( ! ( creation thread . threw exception ( ) ) ) && ( creation thread . get created view ( ) == null ) ) { message box . show information ( plugin interface . get main window ( ) . get frame ( ) @$ __str__ ) ; } else { new thread ( ) { @ override public void,user selected function,success,obj,None,8,,,,
the aws region provider chain that is used by default throws an <PLACE_HOLDER> instead of returning null when the region is not defined . for that reason @$ we have to support both throwing an <PLACE_HOLDER> and returning null as the region not being defined .,return null ;,chain throws exception,success,obj,None,0,,,,
if bolt has not finished <PLACE_HOLDER> or was not exactly once mode @$ just process the tuple immediately,if ( ! init || ( batch cache != null && ! batch cache . is exactly once mode ( ) ) ) { } else { pending batch batch = batch cache . get next pending batch ( last successful batch ) ; if ( batch != null ) { list < byte [ ] > pending msgs = batch . get tuples ( ) ; while ( pending msgs != null ) { for ( byte [ ] msg : pending msgs ) { receiver . deserialize tuple ( deserializer @$ msg @$ queue ) ; } pending msgs = batch . get tuples ( ) ; } } kryo input . set buffer ( data ) ; kryo input . set position ( __num__ ),bolt finished initialization,success,obj,init <SEP> msgs <SEP> deserialize ,14,init:initialization  1,code$$ deserialize:deserializer  1,,
make sure the subject has a <PLACE_HOLDER>,assert false ( client principals . is empty ( ) ) ;,subject has principal,success,obj,None,1,principals : principal  ? ,,,
bad value prevents <PLACE_HOLDER> to next .,trigger action in cell editor ( key event . vk_tab ) ; assert is editing field ( __num__ @$ dt col num ) ;,value prevents move,success,obj,None,4,,,,
get object can return <PLACE_HOLDER> if constraints were specified but not met,if ( s3 object == null ) return null ; output stream output stream = null ; try { output stream = new buffered output stream ( new file output stream ( destination file ) ) ; byte [ ] buffer = new byte [ __num__ * __num__ ] ; int bytes read ; while ( ( bytes read = s3 object . get object content ( ) . read ( buffer ) ) > - __num__ ) { output stream . write ( buffer @$ __num__ @$ bytes read ) ; } } catch ( io exception e ) { throw new sdk client exception ( __str__ + e . get message ( ) @$ e ) ; } finally { close quietly ( output stream @$,object return null,success,obj,None,16,,,,
clear references to <PLACE_HOLDER> @$ this should orphan the <PLACE_HOLDER> which should in turn trigger orphan removal logic .,team . set one vone player ( null ) ; team2 . set one vone player ( null ) ; tx . commit ( ) ; s . close ( ) ; s = open session ( ) ; tx = s . begin transaction ( ) ; count = ( ( long ) s . create query ( __str__ ) . iterate ( ) . next ( ) ) . int value ( ) ; assert equals ( __str__ + count @$ count @$ __num__ ) ; tx . commit ( ) ; s . close ( ) ;,references orphan players,success,obj,tx <SEP> tx <SEP> tx ,13,,code$$  tx: transaction 3,,
the text lines total height is larger than this view @$ snap <PLACE_HOLDER> to the top and bottom of the view .,if ( line1 height + line2 height > height ) { if ( child != m text line1 ) { vertical offset = height - line2 height ; } } else { vertical offset = ( height - line1 height - line2 height ) / __num__ ; if ( child == m text line2 ) { vertical offset += line1 height ; if ( m suggestion . has answer ( ) && m suggestion . get answer ( ) . get second line ( ) . has image ( ) ) { vertical offset += get resources ( ) . get dimension pixel offset ( r . dimen . omnibox_suggestion_answer_line2_vertical_spacing ) ; } } if ( line1 height != line2 height ) { vertical offset += ( line2,lines snap them,success,obj,None,16,,,,
validate inode tree <PLACE_HOLDER> match given <PLACE_HOLDER> .,for ( mutable inode < ? > node : journaled ) { assert true ( tree entries . contains ( node . to journal entry ( ) ) ) ; },entries match entries,success,obj,None,4,,,,
req.get remote host returns ip <PLACE_HOLDER> @$ try to resolve hostname to be consistent with raw protocol .,try { final inet address client address = inet address . get by name ( client host name ) ; client host name = client address . get host name ( ) ; } catch ( unknown host exception e ) { logger . info ( __str__ @$ client host name @$ e . get message ( ) ) ; },returns ip address,success,obj, e <SEP> e,3,,code$$  e: exception 2,,
in theory node name ca n't be null but better be careful who knows <PLACE_HOLDER> other implementations may be doing ? ...,if ( get node name ( ) == null ) { if ( arg . get node name ( ) != null ) { return false ; } } else if ( ! get node name ( ) . equals ( arg . get node name ( ) ) ) { return false ; } if ( get local name ( ) == null ) { if ( arg . get local name ( ) != null ) { return false ; } } else if ( ! get local name ( ) . equals ( arg . get local name ( ) ) ) { return false ; } if ( get namespaceuri ( ) == null ) { if ( arg . get namespaceuri ( ),implementations doing what,success,obj, arg <SEP> uri ,9,,,,
starting the job master should have read the <PLACE_HOLDER>,try { final completed checkpoint savepoint checkpoint = completed checkpoint store . get latest checkpoint ( false ) ; assert that ( savepoint checkpoint @$ matchers . not null value ( ) ) ; assert that ( savepoint checkpoint . get checkpointid ( ) @$ is ( savepoint id ) ) ; } finally { rpc utils . terminate rpc endpoint ( job master @$ testing timeout ) ; },master read savepoint,success,obj,None,12,,,,
verify that the archive rule has the correct <PLACE_HOLDER> : the object files from our sources .,rule . get native linkable input ( cxx platform @$ linker . linkable dep type . static @$ graph builder @$ unconfigured target configuration . instance ) ; build rule static rule = graph builder . get rule ( cxx description enhancer . create static library build target ( target @$ cxx platform . get flavor ( ) @$ pic type . pdc ) ) ; assert not null ( static rule ) ; assert equals ( immutable set . of ( cxx source rule factorypdc . create compile build target ( __str__ ) @$ cxx source rule factorypdc . create compile build target ( gen source name ) ) @$ static rule . get build deps ( ) . stream ( ) . map ( build rule,rule has deps,success,obj,None,16,deps:deps ?,,,
this call does the right <PLACE_HOLDER> with a null transaction task queue,if ( ! m_complete msg . is restart ( ) ) { do commonspi complete actions ( ) ; log todr ( site connection . getdr gateway ( ) ) ; } else { m_txn state . set begin undo token ( site . k invalid undo token ) ; },call does thing,success,obj, m <SEP> txn <SEP> m,6,,code$$  m msg 2,,
no more room to display the comments below ; do n't process <PLACE_HOLDER>,if ( total comments found > max display lines ) { return ; },comments process them,success,obj,None,2,,,,
some binary files have <PLACE_HOLDER>,while ( c != __str__ ) { if ( c != __str__ ) sb . append ( c ) ; c = ( char ) buffer . get ( ) ; },files have newline,success,obj, sb,3,,comm&& sb:some binary 1,,
explicit <PLACE_HOLDER> provider implies <PLACE_HOLDER>,config . get ( key_authorizer ) . as string ( ) . if present ( value -> { if ( ! config . get ( key_authorize ) . exists ( ) ) { builder . authorize ( true ) ; } } ) ; return builder . build ( ) ;,provider implies atz,success,obj,keyauthorize ,5,,code$$   key_authorize  key_authorizer 1 ,,
bean may have acquired new weak <PLACE_HOLDER>,target = result . get node ( ) ; assert . assert equals ( count ++ @$ result . get value ( ) . int value ( ) ) ;,bean acquired affinity,success,obj,None,2,int: affinity ??  ,,,
make sure that the pattern matches a <PLACE_HOLDER> by one .,if ( ! b . is java constant ( ) ) { return null ; } java constant b cst = b . as java constant ( ) ; long b value ; if ( b cst . get java kind ( ) == java kind . int ) { b value = b cst . as int ( ) ; } else if ( b cst . get java kind ( ) == java kind . long ) { b value = b cst . as long ( ) ; } else { return null ; } if ( b value == - __num__ ) { return builder -> get arithmeticlir generator ( ) . emit get mask up to lowest set bit ( operand ( a,pattern matches subtraction,success,obj, cst <SEP> cst <SEP> cst <SEP> cst <SEP> cst,5,,code$$  cst constant 6,,
1 st root <PLACE_HOLDER>,if ( parent == null ) { long next = ( ( long ) phase << phase_shift ) | adj ; if ( state . compare and set ( this @$ s @$ next ) ) break ; } else { main lock . lock ( ) ; try { if ( state == s ) { parent . do register ( __num__ ) ; do { phase = ( int ) ( root . state > > > phase_shift ) ; } while ( ! state . compare and set ( this @$ state @$ ( ( long ) phase << phase_shift ) | adj ) ) ; break ; } } finally { main lock . unlock ( ) ; } },st root registration,success,obj,adj ,7,,,,
model name can not use reserved <PLACE_HOLDER> @$ e.g . return,if ( is reserved word ( camelized name ) ) { final string model name = __str__ + camelized name ; logger . warn ( camelized name + __str__ + model name ) ; return model name ; },name use keyword,success,obj,None,5,,,,
if declaration does not provide <PLACE_HOLDER> @$ there is no connection to make,if ( usage == null || declaration == null || declaration . length == __num__ ) return ; if ( usage . length != declaration . length ) return ;,declaration provide generics,success,obj,None,1,,,,
if event has this <PLACE_HOLDER> to filter on,if ( event dimension transformed . contains ( filter dimension transformed ) || filter dimension transformed . contains ( event dimension transformed ) ) { set < string > event dimension values set = new hash set < > ( event dimension values transformed ) ; event dimension values set . retain all ( filtered dimension values transformed ) ; if ( ! event dimension values set . is empty ( ) ) { filtered events . add ( event ) ; event added = true ; break ; } },event has dimension,success,obj,None,17,,,,
test contents using contains element set <PLACE_HOLDER>,int size2 = __num__ ; int previous element = - __num__ ; for ( int element : set ) { assert true ( bs . get ( element ) ) ; size2 ++ ; assert true ( previous element < __num__ || ( ascending ? element - previous element > __num__ : element - previous element < __num__ ) ) ; previous element = element ; } assert equals ( size2 @$ size ) ;,contents contains iterator,success,obj,None,13,,,,
transfer send some asset issue to default account @$ to test if this transaction use the creator <PLACE_HOLDER> .,assert . assert true ( public methed . transfer asset ( to address @$ asset account id . to byte array ( ) @$ __num__ @$ transfer asset address @$ transfer asset create key @$ blocking stub full ) ) ; public methed . wait produce next block ( blocking stub full ) ; asset creator net = public methed . get account net ( asset012 address @$ blocking stub full ) ; asset transfer net = public methed . get account net ( transfer asset address @$ blocking stub full ) ; long creator after net used = asset creator net . get net used ( ) ; long transfer after free net used = asset transfer net . get free net used ( ) ; logger,transaction use net,success,obj,None,14,,,,
if the incoming uri matches a single note <PLACE_HOLDER> @$ does the delete based on the incoming data @$ but modifies the where clause to restrict it to the particular note <PLACE_HOLDER> .,case main_id :,uri matches id,success,obj,None,1,id incoming data  ,,,
pipeline should have ssl <PLACE_HOLDER> and server tls <PLACE_HOLDER>,iterator < map . entry < string @$ channel handler > > iterator = pipeline . iterator ( ) ; assert that ( iterator . next ( ) . get value ( ) ) . is instance of ( ssl handler . class ) ;,pipeline have handler,success,obj,ssl,5,,,,
unknown host exception happens if we ca n't resolve host<PLACE_HOLDER> into ip address . unknown host exception 's get message method returns just the host<PLACE_HOLDER> which is a useless message @$ so log the exception class <PLACE_HOLDER> to provide more info .,log . debug ( e . to string ( ) ) ; throw new helios exception ( __str__ + uri @$ e ) ; throw new helios exception ( __str__ + uri @$ e ) ;,hostname log name,success,obj,None,4,,,,
let 's not store 'raw ' <PLACE_HOLDER> but nodes,if ( value == null ) { value = null node ( ) ; },s store nulls,success,obj,None,0,,,,
start the two trigger <PLACE_HOLDER> . they will wait at the barrier,t1 . start ( ) ; t2 . start ( ) ;,two trigger threads,success,obj,t1 <SEP> t2,2,,code$$  t trigger 2,,
a filter with a start date of now should not accept the <PLACE_HOLDER>,filter = new log filter ( level . info @$ local date time . now ( ) @$ null ) ; assert that ( filter . accepts file ( path ) ) . is false ( ) ;,filter accept file,success,obj,None,1,,,,
these credentials must match <PLACE_HOLDER> in the default password file,string [ ] credentials = new string [ ] { __str__ @$ __str__ } ; cli_env . put ( __str__ @$ credentials ) ; jmxc = jmx connector factory . connect ( url @$ cli_env ) ; m bean server connection mbsc = jmxc . getm bean server connection ( ) ;,credentials match those,success,obj, jmxc <SEP> jmx <SEP> mbsc <SEP> jmxc ,10,,code$$  jmxc  jmx connector  2,code$$  mbsc  m bean server connection 1,
<PLACE_HOLDER> url must match <PLACE_HOLDER> url must not match <PLACE_HOLDER> ip must match <PLACE_HOLDER> ip must not match <PLACE_HOLDER> country must match <PLACE_HOLDER> no depth limit match index url must match index url must not match index content must match index content must not match,this . default remote profile = new crawl profile ( crawl_profile_remote @$ crawl profile . match_all_string @$ crawl profile . match_never_string @$ crawl profile . match_all_string @$ crawl profile . match_never_string @$ crawl profile . match_never_string @$ crawl profile . match_never_string @$ crawl profile . match_all_string @$ crawl profile . match_never_string @$ crawl profile . match_all_string @$ crawl profile . match_never_string @$ __num__ @$ false @$ null @$ - __num__ @$ true @$ true @$ true @$ false @$ true @$ true @$ false @$ false @$ - __num__ @$ false @$ true @$ crawl profile . match_never_string @$ cache strategy . iffresh @$ __str__ + crawl_profile_remote @$ client identification . yacy internet crawler agent name @$ null @$ null @$ __num__ ) ;,ip match crawler,success,obj,None,20,,,,
box drawings light horizontal @$ so box drawings light <PLACE_HOLDER> @$ so box drawings light down and right @$ so box drawings light down and left @$ so box drawings light up and left @$ so box drawings light up and right @$ so box drawings light <PLACE_HOLDER> and right @$ so box drawings light down and horizontal @$ so box drawings light <PLACE_HOLDER>,return new object [ ] [ ] ,drawings light vertical,success,obj,None,60,,,,
the list of relational values should contain 2 or more values : the first represents the <PLACE_HOLDER> the rest represent the fk,if ( relational value sources . size ( ) < __num__ ) { throw new mapping exception ( string . format ( locale . english @$ __str__ @$ jaxb any mapping . get name ( ) ) @$ origin ( ) ) ; } this . discriminator source = new any discriminator source ( ) { private final hibernate type source type source = new hibernate type source impl ( jaxb any mapping . get meta type ( ) ) ; private final relational value source relational value source = relational value sources . get ( __num__ ) ; private final map < string @$ string > value mappings = new hash map < string @$ string > ( ) ; { for ( jaxb hbm any value,first represents discriminator,success,obj, impl ,13,,,,
the processor does n't taint the consumer <PLACE_HOLDER> which has already finished,span processor span = take span ( consumer spans ) ; assert that ( processor span . id ( ) ) . is not equal to ( consumer span . id ( ) ) ;,processor taint span,success,obj,None,1,,,,
test case of child filling its <PLACE_HOLDER> @$ but its <PLACE_HOLDER> is n't filling its own <PLACE_HOLDER> .,builder . set layer ( __num__ ) . set is visible ( true ) ; final test window container visible unspecified root child child fills parent = visible unspecified root child . add child window ( builder ) ; visible unspecified root child child fills parent . set orientation ( screen_orientation_portrait ) ; assert equals ( screen_orientation_portrait @$ visible unspecified root child child fills parent . get orientation ( ) ) ; assert equals ( screen_orientation_unset @$ visible unspecified root child . get orientation ( ) ) ; assert equals ( screen_orientation_behind @$ root . get orientation ( ) ) ; visible unspecified root child . set fills parent ( true ) ; assert equals ( screen_orientation_portrait @$ visible unspecified root child . get orientation ( ) ),parent filling parent,success,obj,None,14,,,,
the final thread that should n't execute releases the latch once it has run so it is deterministic that the other two fill the thread <PLACE_HOLDER> until this one rejects,if ( ! should execute ) { success latch . count down ( ) ; },two fill pool,success,obj,None,0,,,,
required features expect activity launch <PLACE_HOLDER> in,fail ( __str__ ) ;,features expect options,success,obj,None,1,,,,
if this mapping has a valid file <PLACE_HOLDER> then we close it,if ( fd . valid ( ) ) { try { nd . close ( fd ) ; } catch ( io exception ignore ) { } },mapping has descriptor,success,obj,fd <SEP> nd  <SEP> fd ,5,fd file descriptor  2,,,
for any <PLACE_HOLDER>s in the controller callback @$ test browser callback should have overridden the <PLACE_HOLDER> and call matching api in the callback proxy .,for ( int i = __num__ ; i < methods . length ; i ++ ) { assert not equals ( __str__ + methods [ i ] + __str__ @$ browser callback . class @$ methods [ i ] . get declaring class ( ) ) ; assert not equals ( __str__ + methods [ i ] + __str__ @$ controller callback . class @$ methods [ i ] . get declaring class ( ) ) ; },callback overridden method,success,obj,None,15,,,,
how many header <PLACE_HOLDER> ?,int argnr = rep . count nr job entry attributes ( id_jobentry @$ __str__ ) ; allocate ( argnr ) ; for ( int a = __num__ ; a < argnr ; a ++ ) { header name [ a ] = rep . get job entry attribute string ( id_jobentry @$ a @$ __str__ ) ; header value [ a ] = rep . get job entry attribute string ( id_jobentry @$ a @$ __str__ ) ; },many header name,success,obj,argnr ,13,,,,
assume properties contain <PLACE_HOLDER>,if ( property value == null ) { if ( require property ) { throw new illegal argument exception ( __str__ + property key + __str__ + property key + __str__ ) ; } else { return null ; } } property value = get slashy path ( property value ) ; property value = correct double slash ( property value @$ property index end @$ str ) ; result += property value ; property index end ++ ; property index start = property index end ;,properties contain paths,success,obj,None,5,,,,
the second line has a ' <PLACE_HOLDER> ' @$ so it needs more ascent and descent .,if ( m enabled ) { assert equals ( - __num__ * em @$ layout . get line ascent ( __num__ ) ) ; assert equals ( __num__ * em @$ layout . get line descent ( __num__ ) ) ; } else { assert equals ( - em @$ layout . get line ascent ( __num__ ) ) ; assert equals ( __num__ * em @$ layout . get line descent ( __num__ ) ) ; },line has b,success,obj,None,11,,,,
loading child elements modifies the <PLACE_HOLDER> of the attribute set 's underlying parser @$ so it needs to happen after obtaining attributes and extracting <PLACE_HOLDER>s .,if ( dr == null ) { int type ; while ( ( type = parser . next ( ) ) == xml pull parser . text ) { } if ( type != xml pull parser . start_tag ) { throw new xml pull parser exception ( parser . get position description ( ) + item_missing_drawable_error ) ; } if ( parser . get name ( ) . equals ( __str__ ) ) { dr = vector drawable compat . create from xml inner ( resources @$ parser @$ attrs @$ theme ) ; } else if ( sdk_int >= lollipop ) { dr = drawable . create from xml inner ( resources @$ parser @$ attrs @$ theme ) ; } else { dr = drawable,elements modifies state,success,obj,attrs <SEP>attrs <SEP> dr <SEP> dr <SEP> dr <SEP> dr,22,,comm&& attr: attributes 2,code$$ dr drawable 4,
extension registry may be either extension registry or extension registry lite . since the type we are parsing is a full message @$ only a full extension registry could possibly contain <PLACE_HOLDER> of it . otherwise we will treat the registry as if it were empty .,if ( type . is extension number ( field number ) ) { if ( extension registry instanceof extension registry ) { final extension registry . extension info extension = target . find extension by number ( ( extension registry ) extension registry @$ type @$ field number ) ; if ( extension == null ) { field = null ; } else { field = extension . descriptor ; default instance = extension . default instance ; if ( default instance == null && field . get java type ( ) == descriptors . field descriptor . java type . message ) { throw new illegal state exception ( __str__ + field . get full name ( ) ) ; } } } else { field =,registry contain extensions,success,obj,None,3,,,,
all locks clients should be stopped at this point @$ and all all locks should be released because none of the clients entered the prepare <PLACE_HOLDER>,lock count visitor lock count visitor = new lock count visitor ( ) ; locks . accept ( lock count visitor ) ; assert equals ( __num__ @$ lock count visitor . get lock count ( ) ) ;,none entered phase,success,obj,None,3,,,,
more complicated . vh 2 has a higher version @$ but has some <PLACE_HOLDER> that vh 1 does not have .,region version holder vh1 = new region version holder ( member ) ; region version holder vh2 = new region version holder ( member ) ; bit set bs1 = new bit set ( ) ; bs1 . set ( __num__ @$ __num__ ) ; bs1 . set ( __num__ @$ __num__ ) ; record versions ( vh1 @$ bs1 ) ; bit set bs2 = new bit set ( ) ; bs2 . set ( __num__ @$ __num__ ) ; bs2 . set ( __num__ @$ __num__ ) ; record versions ( vh2 @$ bs2 ) ;,vh has exceptions,success,obj,vh1 <SEP> vh2 <SEP> bs1 <SEP> bs1 <SEP> bs1 <SEP> vh1 <SEP> bs1 <SEP> bs2 <SEP> bs2 <SEP> bs2 <SEP> vh2 <SEP> bs2,22,,code$$  vh version holder 4,code$$  bs bit set 8  ,
assertion on auto onboard another dummy data <PLACE_HOLDER>,metadata source config another dummymd source = ds to onboards map . get ( __str__ ) . get ( __num__ ) . get metadata source config ( ) ; assert . assert equals ( another dummymd source . get class name ( ) @$ __str__ ) ; assert . assert equals ( another dummymd source . get properties ( ) . size ( ) @$ __num__ ) ; assert . assert equals ( another dummymd source . get properties ( ) . get ( __str__ ) @$ __str__ ) ; assert . assert equals ( another dummymd source . get properties ( ) . get ( __str__ ) @$ __num__ ) ;,assertion onboard source,success,obj,config <SEP> ds <SEP> config ,24,,code$$  ds dummymd source  1,,
if the scope has no <PLACE_HOLDER> try to remove it,if ( ! ( ( basic scope ) broadcast scope ) . has event listeners ( ) ) { if ( log . is debug enabled ( ) ) { log . debug ( __str__ ) ; } scope . remove child scope ( broadcast scope ) ; } log . debug ( __str__ @$ name ) ;,scope has listeners,success,obj,None,3,,,,
the keys of probe and build <PLACE_HOLDER> are overlapped @$ so there would be none unmatched build elements after probe phase @$ make sure build side outer join works well in this case .,final int probe vals per key = __num__ ;,keys build sides,success,obj,vals,3,,,,
equal class with one maybe a primitive @$ the later explicit cast arguments will solve this <PLACE_HOLDER>,continue ;,class solve case,success,obj,None,0,,,,
the finally clause will send an <PLACE_HOLDER> .,remove decoder ( imgd ) ; if ( thread . current thread ( ) . is interrupted ( ) || ! thread . current thread ( ) . is alive ( ) ) { error all consumers ( imgd . queue @$ true ) ; } else { error all consumers ( imgd . queue @$ false ) ; },clause send error,success,obj,imgd,6,,,,
user should not see anything so give unsatisfiable <PLACE_HOLDER>,return process payload builder . process definitions ( ) . with process definition key ( __str__ + uuid . randomuuid ( ) . to string ( ) ) . build ( ) ;,anything give condition,success,obj, uuid ,7,,,,
then : '' collected must remove <PLACE_HOLDER> '',assert that ( tap . block ( ) ) . contains exactly ( __num__ @$ __num__ @$ __num__ ) ;,collected remove duplicates,success,obj,None,4,,,,
fire should not purge <PLACE_HOLDER>,assert equals ( __num__ @$ test harness . num keyed state entries ( ) ) ;,fire purge contents,success,obj,None,5,,,,
assert the package tracker triggered an <PLACE_HOLDER> .,check update check triggered ( new package versions ) ; check token token2 = m fake intent helper . capture and reset last token ( ) ;,tracker triggered update,success,obj,None,4,,,,
lcn type need connection <PLACE_HOLDER>,dtx local context . make proxy ( ) ;,type need proxy,success,obj,dtx,1,,,,
output node local <PLACE_HOLDER>,local properties lp = p . get local properties ( ) ; writer . print ( __str__ ) ; if ( lp . get ordering ( ) != null ) { add property ( writer @$ __str__ @$ lp . get ordering ( ) . to string ( ) @$ true ) ; } else { add property ( writer @$ __str__ @$ __str__ @$ true ) ; } if ( lp . get grouped fields ( ) != null && lp . get grouped fields ( ) . size ( ) > __num__ ) { add property ( writer @$ __str__ @$ lp . get grouped fields ( ) . to string ( ) @$ false ) ; } else { add property ( writer @$ __str__,output node properties,success,obj,None,15,,,,
synchronize on scanner read <PLACE_HOLDER>s so that nobody calculates get smallest read <PLACE_HOLDER> @$ before scanner read <PLACE_HOLDER>s is updated .,isolation level isolation level = scan . get isolation level ( ) ; long mvcc read point = package private field accessor . get mvcc read point ( scan ) ; synchronized ( scanner read points ) { if ( mvcc read point > __num__ ) { this . read pt = mvcc read point ; } else if ( nonce == h constants . no_nonce || rs services == null || rs services . get nonce manager ( ) == null ) { this . read pt = get read point ( isolation level ) ; } else { this . read pt = rs services . get nonce manager ( ) . get mvcc from operation context ( nonce group @$ nonce ) ; } scanner,synchronize read point,success,obj, rs ,17,,,,
group the <PLACE_HOLDER> into those that use indexes and those that do n't @$ so we can evaluate all the <PLACE_HOLDER> that do n't use indexes together in one iteration first get filter <PLACE_HOLDER>,filter filter operands = null ;,iteration get operands,success,obj,None,1,operands  operands  ,,,
user already specified schema <PLACE_HOLDER>,if ( vendor extensions . contains key ( codegen_vendor_extension_key ) ) { logger . info ( __str__ + base name + __str__ ) ; return ; },user specified values,success,obj,None,5,,,,
javax mail incorrectly adds the <PLACE_HOLDER> for the first boundary to the end of the preamble @$ so we trim,assert . assert equals ( javax mail multi partmime reader . _preamble != null ? javax mail multi partmime reader . _preamble . trim ( ) : null @$ expected preamble ) ;,mail adds crlf,success,obj,None,5,,,,
all other operands require a <PLACE_HOLDER>,return register priority . must have register ;,operands require register,success,obj,None,0,,,,
for binary set the response op <PLACE_HOLDER>,if ( this . protocol == protocol . binary ) { reply . rewind ( ) ; reply . put ( position_opcode @$ buffer . get ( position_opcode ) ) ; reply . put int ( position_opaque @$ buffer . get int ( position_opaque ) ) ; if ( connection handler . get logger ( ) . finer enabled ( ) ) { connection handler . get logger ( ) . finer ( __str__ + reply + __str__ + command . bufferto string ( reply ) ) ; } } socket channel channel = this . socket . get channel ( ) ; if ( channel == null || ! channel . is open ( ) ) { throw new illegal state exception ( __str__ ) ; },binary set code,success,obj,None,12,,,,
should use root entity <PLACE_HOLDER> by default,criteria executor criteria executor = new criteria executor ( ) { protected criteria get criteria ( session s ) { return s . create criteria ( enrolment . class @$ __str__ ) . create alias ( __str__ @$ __str__ @$ criteria . left_join ) . set fetch mode ( __str__ @$ fetch mode . join ) . set fetch mode ( __str__ @$ fetch mode . join ) . set projection ( projections . projection list ( ) . add ( projections . property ( __str__ ) ) . add ( projections . property ( __str__ ) ) ) . add order ( order . asc ( __str__ ) ) ; } } ;,use root transformer,success,obj,None,21,,,,
make sure the master has <PLACE_HOLDER> of the reports,waiter . wait for ( test_util . get configuration ( ) @$ __num__ * __num__ @$ new predicate < exception > ( ) { @ override public boolean evaluate ( ) throws exception { map < region info @$ long > region sizes = quota manager . snapshot region sizes ( ) ; log . trace ( __str__ + region sizes ) ; return num regions == count regions for table ( tn @$ region sizes ) && table size <= get table size ( tn @$ region sizes ) ; } } ) ; map < table name @$ long > sizes = test_util . get admin ( ) . get space quota table sizes ( ) ; long size = sizes . get ( tn ),master has all,success,obj,util <SEP> util ,17,,,,
test once using the current correct hash function @$ expect no mispartitioned <PLACE_HOLDER>,client response cr = client . call procedure ( __str__ @$ ( object ) null ) ; volt table hashinator matches = cr . get results ( ) [ __num__ ] ; hashinator matches . advance row ( ) ; while ( hashinator matches . advance row ( ) ) { assert equals ( __num__ @$ hashinator matches . get long ( __str__ ) ) ; } volt table validate result = cr . get results ( ) [ __num__ ] ;,test expect rows,success,obj,cr <SEP> cr <SEP> cr ,21,,code$$ client response 3,,
make a copy of the graph to avoid concurrency problems . graph manipulations are not thread safe @$ and another thread can concurrently inline this <PLACE_HOLDER> .,final structured graph graph = ( structured graph ) method . compilation info . get graph ( ) . copy ( debug ) ; try ( debug context . scope s = debug . scope ( __str__ @$ graph @$ method @$ this ) ) { try { try ( indent in = debug . log and indent ( __str__ @$ method ) ) { boolean inlined = false ; for ( invoke invoke : graph . get invokes ( ) ) { if ( invoke instanceof invoke node ) { throw vm error . should not reach here ( __str__ + invoke . call target ( ) . target method ( ) . format ( __str__ ) + __str__ + ( graph . method ( ) ==,thread inline method,success,obj,  vm,11,,,,
<PLACE_HOLDER> does n't recover any more the recovered <PLACE_HOLDER> should not call retain assignment @$ as it is not a clean startup .,assert false ( __str__ @$ mock load balancer . retain assign called ) ;,master recover master,success,obj,None,3,,,,
push twice will fail and temp dir <PLACE_HOLDER>,file out dir = new file ( string utils . format ( __str__ @$ config . get storage directory ( ) @$ segment path ) ) ; out dir . set read only ( ) ; try { pusher . push ( segment dir @$ segments [ i ] @$ false ) ; } catch ( io exception e ) { assert . fail ( __str__ ) ; },push fail cleaned,success,obj,dir <SEP> config <SEP> io ,9,,,,
seek to the end just before the last page of stream to get the <PLACE_HOLDER> .,long last page search position = end position - ogg page header . max_page_size ; if ( last page search position > position before seek to end ) { return last page search position ; },page get duration,success,obj,ogg ,5,,,,
now reptable has 2000 <PLACE_HOLDER> and parttable has 252 <PLACE_HOLDER>,thread . sleep ( __num__ ) ; save tables with default nonce and path ( client ) ; wait for snapshot to finish ( client ) ;,reptable has rows,success,obj,None,2,,,,
object has default meta <PLACE_HOLDER> @$ so we need to replace it on demand,object = obj ;,object has class,success,obj,obj,1,,code$$ comm&& obj  object 1,,
release app 2 's am <PLACE_HOLDER> on node 2 .,scheduler . handle ( app removed event2 ) ; assert equals ( __str__ @$ __num__ @$ queue1 . get am resource usage ( ) . get memory size ( ) ) ; scheduler . update ( ) ;,release app container,success,obj,None,6,,,,
if the number of posts on this blog that use this <PLACE_HOLDER> is higher than previous @$ set this as the most popular <PLACE_HOLDER> @$ and set the second most popular <PLACE_HOLDER> to the current most popular <PLACE_HOLDER>,int post count = json this tag . opt int ( __str__ ) ; if ( post count > popular count ) { next most popular tag = most popular tag ; most popular tag = this tag name ; popular count = post count ; } else if ( next most popular tag == null ) { next most popular tag = this tag name ; },number set tag,success,obj,None,4,,,,
this all could probably be done more elegantly via a group extracted from a more comprehensive regexp . clean up any extra <PLACE_HOLDER> around the remainder of the line @$ which should be a view name .,return statement . substring ( matcher . end ( ) ) . trim ( ) ;,elegantly clean spaces,success,obj,None,2,,,,
different properties means different <PLACE_HOLDER>,assert false ( objects . equals ( empty @$ finger ) ) ; assert false ( objects . equals ( empty @$ finger brand ) ) ; assert false ( objects . equals ( finger @$ finger brand ) ) ;,properties means results,success,obj,None,6,,,,
if the flushed requests has <PLACE_HOLDER> @$ we should propagate it also and fail the checkpoint,check and propagate async error ( ) ;,requests has errors,success,obj,None,1,,,,
if no entry keep skipping rows until we come to the end @$ or find <PLACE_HOLDER> that is populated,while ( this . entry == null && this . row < this . length ) { this . entry = this . table [ this . row ] ; this . row ++ ; } return this . entry ;,entry keep one,success,obj,None,3,,,,
no previous id @$ always accept this <PLACE_HOLDER>,if ( requested session id == null ) { requested session id = id ; session = s ; } else if ( requested session id . equals ( id ) ) { } else if ( session == null || ! is valid ( session ) ) { requested session id = id ; session = s ; } else { if ( s != null && is valid ( s ) ) throw new bad message exception ( __str__ + requested session id + __str__ + id ) ; },id accept one,success,obj,None,8,,,,
manually specified value takes <PLACE_HOLDER> over settings .,set enabled ( system properties . get boolean ( debug_sys_looper_stats_enabled @$ parser . get boolean ( settings_enabled_key @$ default_enabled ) ) ) ;,value takes precedence,success,obj,None,5,,,,
get the app log aggregation impl <PLACE_HOLDER> to crash,local dirs handler service mocked dir svc = mock ( local dirs handler service . class ) ; log aggregation service log aggregation service = new log aggregation service ( dispatcher @$ this . context @$ del srvc @$ mocked dir svc ) ; log aggregation service . init ( this . conf ) ; log aggregation service . start ( ) ; application id application1 = builder utils . new application id ( __num__ @$ __num__ ) ; log aggregation service . handle ( new log handler app started event ( application1 @$ this . user @$ null @$ this . acls ) ) ; log aggregation service . handle ( new log handler app finished event ( application1 ) ) ; dispatcher . await ( ),app log thread,success,obj,dir <SEP> svc <SEP> del <SEP> srvc <SEP> dir <SEP> svc ,20,,code$$ dir dirs  2,code$$ svc service  4,
client sent an ack lds <PLACE_HOLDER> .,verify ( request observer ) . on next ( eq ( build discovery request ( node @$ __str__ @$ __str__ @$ xds client impl . ads_type_url_lds @$ __str__ ) ) ) ;,client sent request,success,obj,eq <SEP>impl,7,,,,
this estimate will not take into account the <PLACE_HOLDER> saved by inlining the keys .,return versioned stats disklru region entry off heap object key . class ;,estimate take memory,success,obj,None,2,,,,
build a socks 5 stream host info containing the <PLACE_HOLDER> and the port of the proxy,bytestream stream host info = socks5 packet utils . create bytestream response ( proxyjid @$ initiatorjid ) ; stream host info . add stream host ( proxyjid @$ proxy address @$ __num__ ) ;,info containing address,success,obj,utils,8,,,,
get data will activate deferred <PLACE_HOLDER> if necessary,byte [ ] the header = get data ( ic sig head ) ; int to big endian ( rendering intent @$ the header @$ ic hdr rendering intent ) ;,data activate profiles,success,obj,sig <SEP> hdr,4,,code$$  hdr header  1,,
subsequent same key presses move the keyboard <PLACE_HOLDER> to the next object that starts with the same letter .,if ( ( prefix . length ( ) == __num__ ) && ( c == prefix . char at ( __num__ ) ) ) { starting row ++ ; } else { prefix = typed string ; },presses move focus,success,obj,None,5,,,,
case . it consists of two arrays of lines . the first array of lines is the test input @$ and the second one is the expected output . if the second array has a single <PLACE_HOLDER> starting with ! ! then it is expected that import orderer will throw a formatter exception with that message . if a line ends with \ then,string [ ] [ ] [ ] inputs outputs = { { { } @$ { } } @$ { { __str__ @$ __str__ } @$ { __str__ @$ __str__ } } @$ { { __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ } @$ { __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ } } @$ { { __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ } @$ { __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ } } @$ { { __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ } @$ { __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ } } @$ { { __str__ @$ __str__ @$ __str__ @$ __str__,array has element,success,obj,None,44,,,,
make sure that the scanner does n't throw an <PLACE_HOLDER> after the connection cache timeout,for ( int i = __num__ ; i < num trials ; i ++ ) { list < t result > results = handler . get scanner rows ( scan id @$ __num__ ) ; assert array equals ( bytes . to bytes ( __str__ + i ) @$ results . get ( __num__ ) . get row ( ) ) ; thread . sleep ( trial pause ) ; },scanner throw exception,success,obj,None,14,,,,
poor man 's dependency <PLACE_HOLDER> through the jersey application scope .,m block master = ( ( alluxio master process ) context . get attribute ( master web server . alluxio_master_servlet_resource_key ) ) . get master ( block master . class ) ;,man dependency injection,success,obj,None,3,,,,
start the modify procedure & & kill the <PLACE_HOLDER>,long proc id = proc exec . submit procedure ( new modify table procedure ( proc exec . get environment ( ) @$ new td ) ) ; int last step = __num__ ;,procedure kill executor,success,obj,proc <SEP> proc <SEP> proc ,6,,code$$ comm&& proc procedure  3,,
first do a sanity check and see if this address has any <PLACE_HOLDER> .,if ( ! has conflict ( addr ) ) { return ; } monitor . set message ( __str__ ) ; boolean ask user = chosen conflict option == ask_user ;,address has conflicts,success,obj,addr,3,,comm&& addr address  1,,
if mode is add <PLACE_HOLDER> check if the repository name does not exist in the repository list <PLACE_HOLDER> close this dialog if mode is edit <PLACE_HOLDER> check if the repository name is the same as before if not check if the new name does not exist in the repository . otherwise return true to this method @$ which will mean that repository already exist,if ( input . get description ( ) != null && input . get description ( ) . length ( ) > __num__ ) { if ( mode == mode . add ) { if ( master repositories meta . search repository ( input . get name ( ) ) == null ) { dispose ( ) ; } else { display repository already exist message ( input . get name ( ) ) ; } } else { if ( master repository name . equals ( input . get name ( ) ) ) { dispose ( ) ; } else if ( master repositories meta . search repository ( input . get name ( ) ) == null ) { dispose ( ) ; } else,name exist then,success,obj,None,4,,,,
namespaces can present some <PLACE_HOLDER> @$ so just punt if we 're looking for these .,if ( is set ( analysis @$ bit_namespace ) ) return false ;,namespaces present problems,success,obj,None,1,,,,
events should share <PLACE_HOLDER>,assert same ( event @$ events . pop ( ) ) ;,events share instances,success,obj,None,1,,,,
then delegate to the database metadata driver identifier casing selection which can override these <PLACE_HOLDER> .,return super . build identifier helper ( builder @$ db meta data ) ;,which override settings,success,obj,db,1,,comm&& db database 1,,
if list <PLACE_HOLDER> exceeds pref <PLACE_HOLDER> @$ close connection,if ( closed || ( pref size > __num__ && conns . size ( ) > pref size ) ) { d ( __str__ @$ conn ) ; td ( __str__ @$ conn ) ; conns . remove ( entry ) ; conn . close connection ( ) ; } else { d ( __str__ @$ conn ) ; td ( __str__ @$ conn ) ; entry = conns . get ( loc ) ; entry . release ( ) ; },size exceeds size,success,obj,conns <SEP> conn  <SEP> conn <SEP> conns <SEP> conn <SEP> conn <SEP> conn <SEP> conns <SEP> loc,17,,code$$ comm&&  conn connection  8,,
test that it emits when time passed the time <PLACE_HOLDER>,consumer . accept ( value in global window ( new byte [ __num__ ] ) ) ;,time passed limit,success,obj,None,1,,,,
does this operator make any <PLACE_HOLDER> ?,assert equals ( __str__ @$ pretty ( __str__ ) ) ;,operator make sense,success,obj,None,3,,,,
this version gives a <PLACE_HOLDER> that rest li runs,request < string > req = builders . < string > action ( __str__ ) . build ( ) ; get client ( ) . send request ( req ) . get response ( ) ;,version gives task,success,obj,req <SEP> req,4,,code$$ req  request 2,,
entry does not have attributes <PLACE_HOLDER> : ca certs can have no attributes open ssl generates pkcs 12 with no attr for ca certs .,attr set = null ;,entry attributes note,success,obj,attr,1,,comm&& attr  attributes  1,,
apps can set the interception <PLACE_HOLDER> other than the direct parent .,final view group parent ; if ( m touch interception view group == null ) { parent = ( view group ) get parent ( ) ; } else { parent = m touch interception view group ; },apps set target,success,obj,None,0,,,,
fastpath : do not construct a new <PLACE_HOLDER> if the src is a <PLACE_HOLDER> and is already normalized .,if ( src instanceof string ) { int span length = span quick check yes ( src ) ; if ( span length == src . length ( ) ) { return ( string ) src ; } string builder sb = new string builder ( src . length ( ) ) . append ( src @$ __num__ @$ span length ) ; return normalize second and append ( sb @$ src . sub sequence ( span length @$ src . length ( ) ) ) . to string ( ) ; },fastpath construct string,success,obj, sb <SEP>  sb ,15,,code$$ sb string builder  2,,
be sure to let our parent perform any <PLACE_HOLDER> needed,j label renderer = ( j label ) super . get table cell renderer component ( data ) ; object value = data . get value ( ) ; j table table = data . get table ( ) ; boolean is selected = data . is selected ( ) ; set text ( __str__ ) ; set horizontal alignment ( center ) ; vt match match = ( vt match ) value ; vt association association = match . get association ( ) ; vt association status association status = association . get status ( ) ; if ( ! is selected ) { renderer . set background ( match table renderer . get background color ( association @$ table @$ renderer . get background ( ),parent perform initialization,success,obj,None,9,,,,
first @$ get the database . this is the database which contains the <PLACE_HOLDER> @$ with contains the processed definitions from the ddl file .,database db = get database ( ) ;,which contains catalog,success,obj,db,2,,code$$ comm&& db database  1,,
send message to all peers to find out who hosts the <PLACE_HOLDER>,if ( ! tx . is real deal local ( ) ) { find remotetx message reply processor processor = send find remotetx message ( server connection . get cache ( ) @$ tx id ) ; try { processor . wait for replies uninterruptibly ( ) ; } catch ( reply exception e ) { e . handle cause ( ) ; } internal distributed member hosting member = processor . get hosting member ( ) ; if ( hosting member != null ) { if ( logger . is debug enabled ( ) ) { logger . debug ( __str__ @$ hosting member ) ; } if ( tx . get target ( ) == null ) { tx . set target ( hosting member ),who hosts transaction,success,obj,None,15,,,,
new root should have only 1 <PLACE_HOLDER>,root . go to ( read cursor ) ; assert equals ( __num__ @$ key count ( ) ) ;,root have key,success,obj,None,2,,,,
values of lists must be accumulated as object <PLACE_HOLDER> objects under the value key . will return as a array <PLACE_HOLDER> . called recursively to traverse the entire object graph of each item in the array .,if ( type . equals ( graphson tokens . type_list ) ) { array node list = ( array node ) value ; array node value array = value and type . put array ( graphson tokens . value ) ; for ( int ix = __num__ ; ix < list . size ( ) ; ix ++ ) { add object ( value array @$ get value ( get typed value from json node ( list . get ( ix ) ) @$ include type ) ) ; } } else if ( type . equals ( graphson tokens . type_map ) ) { object node converted map = json node factory . object node ( ) ; object node json object = ( object node ),values return node,success,obj,None,21,,,,
last task to exit when shutdown release <PLACE_HOLDER>,int remaining = thread exit ( this @$ replace me ) ; if ( remaining == __num__ && is shutdown ( ) ) impl close ( ) ;,shutdown release resources,success,obj, impl ,4,,,,
3 rd parameter has no <PLACE_HOLDER> for ownerless,test ( false @$ true @$ false ) ;,parameter has affect,success,obj,None,0,,,,
notify the listeners . do that from the end of the list so that if a listener removes <PLACE_HOLDER> as the result of being called @$ it wo n't mess up with our iteration,if ( m listeners != null ) { int listener count = m listeners . size ( ) ; for ( int i = listener count - __num__ ; i >= __num__ ; i -- ) { m listeners . get ( i ) . on drawer closed ( drawer view ) ; } },listener removes itself,success,obj,None,7,,,,
end of the post fork <PLACE_HOLDER> .,trace . trace end ( trace . trace_tag_activity_manager ) ; if ( parsed args . m invoke with != null ) { wrapper init . exec application ( parsed args . m invoke with @$ parsed args . m nice name @$ parsed args . m target sdk version @$ vm runtime . get current instruction set ( ) @$ pipe fd @$ parsed args . m remaining args ) ; throw new illegal state exception ( __str__ ) ; } else { if ( ! is zygote ) { return zygote init . zygote init ( parsed args . m target sdk version @$ parsed args . m remaining args @$ null ) ; } else { return zygote init . child zygote init ( parsed args,end fork event,success,obj,None,29,,,,
check that the jar does not have an <PLACE_HOLDER> for the removed class,try ( jar file abi jar = new jar file ( abi jar path . to file ( ) ) ) { assert that ( abi jar . stream ( ) . map ( jar entry :: get name ) . collect ( collectors . to set ( ) ) @$ matchers . contains in any order ( __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ @$ __str__ ) ) ; manifest manifest = abi jar . get manifest ( ) ; assert null ( manifest . get attributes ( __str__ ) ) ; },jar have entry,success,obj,None,15,,,,
poi produced the infinity <PLACE_HOLDER> when it should have produced the degrees <PLACE_HOLDER> .,return __num__ ; case __num__ :,poi produced sign,success,obj,None,2,,,,
start spi start <PLACE_HOLDER> .,start stopwatch ( ) ; assert parameter ( cred != null @$ __str__ ) ; if ( log . is debug enabled ( ) ) { log . debug ( config info ( __str__ @$ cred ) ) ; log . debug ( config info ( __str__ @$ cfg ) ) ; log . debug ( config info ( __str__ @$ bucket name suffix ) ) ; log . debug ( config info ( __str__ @$ bucket endpoint ) ) ; log . debug ( config info ( __str__ @$ sse alg ) ) ; } if ( cfg == null ) u . warn ( log @$ __str__ ) ; if ( f . is empty ( bucket name suffix ) ) { u . warn (,spi start stopwatch,success,obj, cfg <SEP> cfg ,17,,code$$ cfg config 2,,
assert that all threads got back the same <PLACE_HOLDER>,for ( future < map < bounded window @$ long > > result : results ) { assert equals ( value @$ result . get ( ) ) ; for ( map . entry < bounded window @$ long > entry : result . get ( ) . entry set ( ) ) { assert same ( value . get ( entry . get key ( ) ) @$ entry . get value ( ) ) ; } },threads got reference,success,obj,None,4,,,,
null means get the first <PLACE_HOLDER> .,return get next oid ( null @$ user data ) ;,means get oid,success,obj,None,0,,,,
the child case instance has the plan item instance <PLACE_HOLDER> as callback <PLACE_HOLDER> stored . when the child case instance is finished @$ the plan item of the parent case needs to be triggered .,if ( case instance state . terminated . equals ( callback data . get new state ( ) ) || case instance state . completed . equals ( callback data . get new state ( ) ) ) { command context command context = command context util . get command context ( ) ; plan item instance entity plan item instance entity = command context util . get plan item instance entity manager ( command context ) . find by id ( callback data . get callback id ( ) ) ; if ( plan item instance entity != null ) { command context util . get agenda ( command context ) . plan trigger plan item instance operation ( plan item instance entity ) ; } },instance has id,success,obj,None,7,,,,
we enqueued a pending frame @$ let 's try <PLACE_HOLDER> else next .,break ;,let try something,success,obj,None,0,,,,
some statistics for bitmap : 1 million distinct keys takes about 2 <PLACE_HOLDER> storage 5 million takes 10 <PLACE_HOLDER> 10 million takes 12 <PLACE_HOLDER>,return __num__ * __num__ * __num__ ;,statistics takes mb,success,obj,None,3,,,,
vm <PLACE_HOLDER> locks and frees key <PLACE_HOLDER>,vm1 . invoke ( new serializable runnable ( ) { @ override public void run ( ) { logger . info ( __str__ ) ; connect distributed system ( ) ; d lock service dls = ( d lock service ) d lock service . create ( dls name @$ get system ( ) @$ true @$ true @$ false ) ; assert that ( dls . lock ( key1 @$ - __num__ @$ - __num__ ) ) . is true ( ) ; logger . info ( __str__ ) ; dls . unlock ( key1 ) ; assert that ( dls . get token ( key1 ) ) . is not null ( ) ; dls . free resources ( key1 ) ; d lock token token,vm locks 1,success ,obj, dls <SEP> dls <SEP> dls <SEP> dls <SEP> dls <SEP> dls ,19,,code$$ dls d lock service  6,,
user 3 joins the new <PLACE_HOLDER>,multi user chat muc3 = new multi user chat ( get connection ( __num__ ) @$ room ) ; muc3 . join ( __str__ ) ;,user joins room,success,obj,muc3 <SEP> muc3 ,4,,code$$ muc multi user chat 2,,
recalculate wait <PLACE_HOLDER> .,woke = ( woke == - __num__ ) ? system . current time millis ( ) : woke ; wait time = this . period - ( woke - start time ) ;,recalculate wait time,success,obj,None,2,,,,
class file to write @$ if directory then use the <PLACE_HOLDER> of the input,path output = paths . get ( args [ __num__ ] ) ; if ( files . is directory ( output ) ) output = output . resolve ( input . get file name ( ) ) ;,directory use name,success,obj, args ,4,,,,
check that the byte array contains the complete <PLACE_HOLDER>,if ( len > b . length ) { throw new illegal argument exception ( __str__ ) ; } try { synchronized ( send lock ) { send packet0 ( id @$ b ) ; } } catch ( io exception ioe ) { if ( ! is open ( ) ) { throw new closed connection exception ( __str__ ) ; } else { throw ioe ; } },array contains packet,success,obj,None,7,packet0  packet  ?  ,code$$ ioe io exception 1,,
in order to find out whether the divide generates the exact <PLACE_HOLDER> @$ we avoid calling the above divide method . 'quotient ' holds the return big decimal object whose scale will be set to 'scl ' .,big decimal quotient ; int scl = check scale non zero ( preferred scale + yscale - xscale + mcp ) ; if ( check scale non zero ( ( long ) mcp + yscale - xscale ) > __num__ ) { int raise = check scale non zero ( ( long ) mcp + yscale - xscale ) ; big integer rb = big multiply power ten ( xs @$ raise ) ; quotient = divide and round ( rb @$ ys @$ scl @$ rounding mode @$ check scale non zero ( preferred scale ) ) ; } else { int new scale = check scale non zero ( ( long ) xscale - mcp ) ; int raise = check scale non zero ( (,divide generates result,success,obj,scl <SEP> rb <SEP> rb <SEP> scl ,23,,comm&& scl scale 2,code$$  rb big integer 2,
start the modify procedure & & kill the <PLACE_HOLDER>,long proc id = proc exec . submit procedure ( new modify table procedure ( proc exec . get environment ( ) @$ new td ) ) ; int last step = __num__ ;,procedure kill executor,success,obj,exec <SEP> exec,2,exec executor 2,,,
ensure process owner creates queued command <PLACE_HOLDER>,if ( ! cmd dir . exists ( ) ) { cmd dir . mkdir ( ) ; return ; },owner creates directory,success,obj,dir<SEP> dir,,dir directory 2,,,
unicode now contains the four hex digits which represents our unicode <PLACE_HOLDER>,if ( unicode . length ( ) == __num__ ) { int value = integer . parse int ( unicode . to string ( ) @$ __num__ ) ; out . write ( ( char ) value ) ; unicode . set length ( __num__ ) ; in unicode = false ; had slash = false ; },which represents character,success,obj,char,,char character 1,,,
print suppressed <PLACE_HOLDER> @$ if any,for ( throwable se : get suppressed ( ) ) se . print enclosed stack trace ( s @$ trace @$ suppressed_caption @$ __str__ @$ deja vu ) ;,print suppressed exceptions,success,obj,se <SEP> se,,se suppressed exception  2,,,
user specified the <PLACE_HOLDER> for local mode hadoop run,console . print info ( __str__ + hadoop mem + __str__ ) ; variables . put ( hadoop_mem_key @$ string . value of ( hadoop mem ) ) ;,user specified memory,success,obj,mem<SEP> mem<SEP> mem,,mem memory 3,,,
close req 1 and make sure req 2 does not affect num active <PLACE_HOLDER> .,actual res1 . close ( ) ; await ( ) . until asserted ( ( ) -> assert that ( client . num active requests ( ) ) . is zero ( ) ) ;,req affect requests,success ,obj,res1,,res requests ?   1,,,
